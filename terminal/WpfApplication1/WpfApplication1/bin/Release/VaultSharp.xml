<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VaultSharp</name>
    </assembly>
    <members>
        <member name="M:VaultSharp.Core.Polymath.MakeRequestAsync``1(System.String,System.Net.Http.HttpMethod,System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Action{System.Net.Http.HttpResponseMessage})">
            //////
        </member>
        <member name="T:VaultSharp.Core.VaultApiException">
            <summary>
            The vault client exception
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.StatusCode">
            <summary>
            The status code returned by Api.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.HttpStatusCode">
            <summary>
            The http status code returned by Api.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.ApiErrors">
            <summary>
            The list of api errors.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.VaultApiException.ApiWarnings">
            <summary>
            The list of api warnings.
            </summary>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor(System.String)">
            <summary>
            Message constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor(System.String,System.Exception)">
            <summary>
            Message constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:VaultSharp.Core.VaultApiException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Status code based exception.
            </summary>
            <param name="httpStatusCode">Http status code.</param>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:VaultSharp.Core.BackendConfig">
            <summary>
            Represents the configuration values for a backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.DefaultLeaseTtl">
            <summary>
            Gets or sets the default lease TTL.
            A value of "0" means that the system defaults are used by this backend.
            </summary>
            <value>
            The default lease TTL.
            </value>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.ForceNoCache">
            <summary>
            Gets or sets the cache flag.
            </summary>
            <value>
            The cache flag.
            </value>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.MaximumLeaseTtl">
            <summary>
            Gets or sets the maximum lease TTL.
            A value of "0" means that the system defaults are used by this backend.
            </summary>
            <value>
            The maximum lease TTL.
            </value>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.TokenType">
            <summary>
            Gets or sets the token type.
            </summary>
            <value>
            The token type.
            </value>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:VaultSharp.Core.BackendConfig.PluginName">
            <summary>
            Gets or sets the plugin name.
            </summary>
            <value>
            The plugin name.
            </value>
        </member>
        <member name="T:VaultSharp.IVaultClient">
            <summary>
            Provides an interface to interact with Vault as a client.
            This is the only entry point for consuming the Vault Client.
            </summary>
        </member>
        <member name="P:VaultSharp.IVaultClient.Settings">
            <summary>
            Gets the Vault Client Settings.
            </summary>
        </member>
        <member name="P:VaultSharp.IVaultClient.V1">
            <summary>
            Gets the V1 Client interface for Vault Api.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AbstractAuthMethodInfo">
            <summary>
            Abstract class. You don't say.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo">
            <summary>
            Represents the login information for the AliCloud Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.Base64EncodedIdentityRequestUrl">
            <summary>
            [required]
            Gets the Base64-encoded HTTP URL used in the signed request.
            </summary>
            <value>
            The base 64 encoded url.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.Base64EncodedIdentityRequestHeaders">
            <summary>
            [required]
            Gets the Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of 
            string values (though the length of that array will probably only be one).
            </summary>
            <value>
            The base 64 encoded headers.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="base64EncodedIdentityRequestUrl">
            [required]
            The Base64-encoded HTTP URL used in the signed request.
            </param>
            <param name="base64EncodedIdentityRequestHeaders">
            [required]
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of 
            string values (though the length of that array will probably only be one).
            </param>       
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="base64EncodedIdentityRequestUrl">
            [required]
            The Base64-encoded HTTP URL used in the signed request.
            </param>
            <param name="base64EncodedIdentityRequestHeaders">
            [required]
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of 
            string values (though the length of that array will probably only be one).
            </param>  
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo">
            <summary>
            Represents the login information for the AppRole Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.RoleId">
            <summary>
            Gets the role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </summary>
            <value>
            The role identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.SecretId">
            <summary>
            Gets the secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </summary>
            <value>
            The secret identifier.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo"/> class.
            </summary>
            <param name="roleId">
            The role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </param>
            <param name="secretId">
            The secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleId">
            The role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </param>
            <param name="secretId">
            The secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AuthMethod">
            <summary>
            Represents an auth method.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethod.Type">
            <summary>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AuthMethodType">
            <summary>
            A helper class for retrieving and comparing Authentication Backend types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.AliCloud">
            <summary>
            Gets the ali cloud.
            </summary>
            <value>
            The ali cloud.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.AppRole">
            <summary>
            Gets the application role.
            </summary>
            <value>
            The application role.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.AWS">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Azure">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.GitHub">
            <summary>
            Gets the git hub type.
            </summary>
            <value>
            The git hub.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.GoogleCloud">
            <summary>
            Gets the GoogleCloud type.
            </summary>
            <value>
            The GoogleCloud.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.JWT">
            <summary>
            Gets the JWT type.
            </summary>
            <value>
            The JWT.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Kubernetes">
            <summary>
            Gets the Kubernetes type.
            </summary>
            <value>
            The Kubernetes.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.LDAP">
            <summary>
            Gets the LDAP type.
            </summary>
            <value>
            The LDAP.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Kerberos">
            <summary>
            Gets the Kerberos type.
            </summary>
            <value>
            The Kerberos.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.OCI">
            <summary>
            Gets the OCI type.
            </summary>
            <value>
            The Okta.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Okta">
            <summary>
            Gets the Okta type.
            </summary>
            <value>
            The Okta.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.RADIUS">
            <summary>
            Gets the RADIUS type.
            </summary>
            <value>
            The RADIUS.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Cert">
            <summary>
            Gets the certificate type.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Token">
            <summary>
            Gets the token type.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.UserPass">
            <summary>
            Gets the generic type.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.CloudFoundry">
            <summary>
            Gets the Cloud Foundry type.
            </summary>
            <value>
            The Cloud Foundry.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AuthMethodType.Type">
            <summary>
            Gets the type type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AuthMethodType" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.op_Equality(VaultSharp.V1.AuthMethods.AuthMethodType,VaultSharp.V1.AuthMethods.AuthMethodType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.op_Inequality(VaultSharp.V1.AuthMethods.AuthMethodType,VaultSharp.V1.AuthMethods.AuthMethodType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.Equals(VaultSharp.V1.AuthMethods.AuthMethodType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.AuthMethods.AuthMethodType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo">
            <summary>
            Represents the login information for the AWS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.AWSAuthMethodType">
            <summary>
            Gets the AWS Auth method type.
            </summary>
            <value>
            The AWS auth type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.RoleName">
            <summary>
            Gets the name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.Nonce">
            <summary>
            Gets the nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-whitelist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-whitelist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">
            <para>[required]</para>
            The mount point.</param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-whitelist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType">
            <summary>
            Represents the AWS Auth types.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType.EC2">
            <summary>
            EC2 based auth.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType.IAM">
            <summary>
            IAM based Auth.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo">
            <summary>
            Represents the login information for the EC2 AWS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.AWSAuthMethodType">
            <summary>
            Gets the AWS Auth method type.
            </summary>
            <value>
            The AWS auth type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.Identity">
            <summary>
            Gets the Base64 encoded EC2 instance identity document. 
            This needs to be supplied along with the signature parameter.
            </summary>
            <value>
            The Base64 encoded EC2 instance identity document signature.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.Signature">
            <summary>
            Gets the Base64 encoded SHA256 RSA signature of the instance identity document. 
            This needs to be supplied along with identity parameter when using the ec2 auth method.
            </summary>
            <value>
            The Identity signature.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.PKCS7">
            <summary>
            Gets the PKCS7 signature of the identity document with all \n characters removed.
            Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.
            </summary>
            <value>
            The PKCS7 signature.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name = "pkcs7" >
            <para>[required/optional]</para>
            The PKCS7 signature of the identity document with all \n characters removed.
            Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.
            </param>
            <param name = "identity" >
            <para>[required/optional]</para>
            The Base64 encoded EC2 instance identity document. 
            This needs to be supplied along with the signature parameter.
            </param>
            <param name = "signature" >
            <para>[required/optional]</para>
            The Base64 encoded SHA256 RSA signature of the instance identity document. 
            This needs to be supplied along with identity parameter when using the ec2 auth method.
            </param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-whitelist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name = "pkcs7" >
            <para>[required/optional]</para>
            The PKCS7 signature of the identity document with all \n characters removed.
            Either this needs to be set OR both identity and signature need to be set when using the ec2 auth method.
            </param>
            <param name = "identity" >
            <para>[required/optional]</para>
            The Base64 encoded EC2 instance identity document. 
            This needs to be supplied along with the signature parameter.
            </param>
            <param name = "signature" >
            <para>[required/optional]</para>
            The Base64 encoded SHA256 RSA signature of the instance identity document. 
            This needs to be supplied along with identity parameter when using the ec2 auth method.
            </param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce to be used for subsequent login requests. 
            If this parameter is not specified at all and if reauthentication is allowed, 
            then the method will generate a random nonce, attaches it to the instance's identity-whitelist 
            entry and returns the nonce back as part of auth metadata. 
            This value should be used with further login requests, to establish client authenticity. 
            Clients can choose to set a custom nonce if preferred, in which case, it is recommended 
            that clients provide a strong nonce. If a nonce is provided but with an empty value, 
            it indicates intent to disable reauthentication. Note that, when disallow_reauthentication option 
            is enabled on either the role or the role tag, the nonce holds no significance. 
            This is ignored unless using the ec2 auth method.
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login
            if using the ec2 auth method, or the "friendly name" (i.e., role name or username) 
            of the IAM principal authenticated.. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo">
            <summary>
            Represents the login information for the IAM AWS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.AWSAuthMethodType">
            <summary>
            Gets the AWS Auth method type.
            </summary>
            <value>
            The AWS auth type.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.HttpRequestMethod">
            <summary>
            Gets the HTTP method used in the signed request. 
            Currently only POST is supported, but other methods may be supported in the future. 
            This is required when using the iam auth method.
            </summary>
            <value>
            The HTTP method used in the signed request.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.RequestUrl">
            <summary>
            Gets the Base64-encoded HTTP URL used in the signed request. 
            Most likely just aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8= (base64-encoding of https://sts.amazonaws.com/) as most 
            requests will probably use POST with an empty URI.
            This is required when using the iam auth method.
            </summary>
            <value>
            The Request Url used in the signed request.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.RequestBody" -->
        <member name="P:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.RequestHeaders">
            <summary>
            Gets the Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            The JSON serialization assumes that each header key maps to either a string value or an array of string 
            values (though the length of that array will probably only be one). 
            If the iam_server_id_header_value is configured in Vault for the aws auth mount, 
            then the headers must include the X-Vault-AWS-IAM-Server-ID header, 
            its value must match the value configured, and the header must be included in the signed headers. 
            This is required when using the iam auth method.
            </summary>
            <value>
            The Base64-encoded, JSON-serialized representation of the sts:GetCallerIdentity HTTP request headers. 
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)" -->
        <member name="T:VaultSharp.V1.AuthMethods.AWS.IAWSAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo">
            <summary>
            Represents the login information for the Azure Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (JWT) from Azure MSI.
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.SubscriptionId">
            <summary>
            [optional]
            Gets the subscription ID for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.ResourceGroupName">
            <summary>
            [optional]
            Gets the resource group for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineName">
            <summary>
            [optional]
            Gets the virtual machine name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata. 
            If <see cref="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName"/> is provided, this value is ignored.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName">
            <summary>
            [optional]
            Gets the virtual machine scale set name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT) from Azure MSI.
            </param>
            <param name="subscriptionId">
            [optional]
            The subscription ID for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="resourceGroupName">
            [optional]
            The resource group for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="virtualMachineName">
            [optional]
            The virtual machine name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata. 
            If <see cref="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName"/> is provided, this value is ignored.
            </param>
            <param name="virtualMachineScaleSetName">
            [optional]
            The virtual machine scale set name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT) from Azure MSI.
            </param>
            <param name="subscriptionId">
            [optional]
            The subscription ID for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="resourceGroupName">
            [optional]
            The resource group for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
            <param name="virtualMachineName">
            [optional]
            The virtual machine name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata. 
            If <see cref="P:VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo.VirtualMachineScaleSetName"/> is provided, this value is ignored.
            </param>
            <param name="virtualMachineScaleSetName">
            [optional]
            The virtual machine scale set name for the machine that generated the MSI token. 
            This information can be obtained through instance metadata.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Azure.IAzureAuthMethod">
            <summary>
            Non login operations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo">
            <summary>
            Represents the login information for the Cert Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.ClientCertificate">
            <summary>
            Gets the client certificate.
            </summary>
            <value>
            The client certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.RoleName">
            <summary>
            Optionally, you may specify a single certificate role to authenticate against.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo" /> class.
            </summary>
            <param name="clientCertificate">The client certificate.</param>
            <param name="roleName">A single certificate role to authenticate against.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="clientCertificate">The client certificate.</param>
            <param name="roleName">A single certificate role to authenticate against.</param>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.CFInstanceCertContent">
            <summary>
            [required]
            The full body of the file available at the path denoted by CF_INSTANCE_CERT.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.CFInstanceKeyContent">
            <summary>
            [required]
            The full body of the file available at the path denoted by CF_INSTANCE_KEY.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="instanceCertContent">[required]
            The full body of the file available at the path denoted by CF_INSTANCE_CERT.
            </param>
            <param name="instanceKeyContent">[required]
            The full body of the file available at the path denoted by CF_INSTANCE_KEY.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="instanceCertContent">[required]
            The full body of the file available at the path denoted by CF_INSTANCE_CERT.
            </param>
            <param name="instanceKeyContent">[required]
            The full body of the file available at the path denoted by CF_INSTANCE_KEY.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo">
            <summary>
            Represents the login information for the Custom Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.CustomAuthMethodInfoAsyncDelegate">
            <summary>
            Gets the CustomAuthMethodInfo asynchronous delegate which includes the token and token info.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.#ctor">
            <summary>
            Use this version in the delegate to return a CustomAuthMethodInfo.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo.#ctor(System.String,System.Func{System.Threading.Tasks.Task{VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo}})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo"/> class.
            </summary>
            <param name="type">The type of the unknown authentication backend type not supported by this library yet. But supported by the Vault Server.</param>
            <param name="customAuthMethodInfoAsyncDelegate">The authentication token asynchronous delegate.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo">
            <summary>
            Represents the login information for the GoogleCloud Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (JWT).
            For iam type roles, this is a JWT signed with the signJwt method <see cref="!:https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signJwt" /> or a self-signed JWT.
            For gce type roles, this is an identity metadata token. <see cref="!:https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature"/>
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            For iam type roles, this is a JWT signed with the signJwt method <see cref="!:https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signJwt" /> or a self-signed JWT.
            For gce type roles, this is an identity metadata token. <see cref="!:https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature"/>
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            For iam type roles, this is a JWT signed with the signJwt method <see cref="!:https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signJwt" /> or a self-signed JWT.
            For gce type roles, this is an identity metadata token. <see cref="!:https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature"/>
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GoogleCloud.IGoogleCloudAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo">
            <summary>
            Represents the login information for the GitHub Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.PersonalAccessToken">
            <summary>
            Gets the personal access token.
            </summary>
            <value>
            The personal access token.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo"/> class.
            </summary>
            <param name="personalAccessToken">The personal access token.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="personalAccessToken">The personal access token.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.GitHub.IGitHubAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.IAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.AliCloud">
            <summary>
            The AliCloud Auth method.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.AppRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.AWS">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Azure">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.CloudFoundry">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.GitHub">
            <summary>
            Hmm.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.GoogleCloud">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Kerberos">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Kubernetes">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.LDAP">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.OCI">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Okta">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.RADIUS">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Cert">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethod.UserPass">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.IAuthMethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication method.
            </summary>
            <value>
            The type of the authentication method.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.IAuthMethodInfo.ReturnedLoginAuthInfo">
            <summary>
            Gets the returned Login Auth info from Vault.
            It'll have the vault login token, accessors and any login metadata.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.IAuthMethodLoginProvider">
            <summary>
            Auth Method login provider.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.IAuthMethodLoginProvider.GetVaultTokenAsync">
            <summary>
            The login method for the auth method.
            </summary>
            <returns>The Vault Token.</returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.JWT.IJWTAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo">
            <summary>
            Represents the login information for the JWT Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (JWT).
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (JWT).
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kerberos.IKerberosAuthMethod">
            <summary>
            Kerberos Auth method.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo">
            <summary>
            Represents the login information for the Kerberos Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.Credentials">
            <summary>
            Credentials to use for Kerberos authentication.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor(System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo.#ctor(System.String,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="credentials">The credential to use.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kubernetes.IKubernetesAuthMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo">
            <summary>
            Represents the login information for the Kubernetes Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.RoleName">
            <summary>
            [required]
            Gets the name of the role against which the login is being attempted.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.JWT">
            <summary>
            [required]
            Gets the signed JSON Web Token (jwt) for authenticating a service account.
            </summary>
            <value>
            The jwt.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo"/> class.
            </summary>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (jwt) for authenticating a service account.
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleName">[required]
            The name of the role against which the login is being attempted.
            </param>
            <param name="jwt">
            [required]
            The signed JSON Web Token (jwt) for authenticating a service account.
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod">
            <summary>
            LDAP Auth method.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.WriteGroupAsync(System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            This endpoint creates or updates LDAP group policies.
            </summary>
            <param name="groupName"><para>[required]</para>
            The name of the LDAP group
            </param>
            <param name="policies"><para>[required]</para>
            List of policies associated to the group.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>        
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadGroupAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint reads LDAP group policies.
            </summary>
            <param name="groupName"><para>[required]</para>
            The name of the LDAP group
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The policies.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadAllGroupsAsync(System.String,System.String)">
            <summary>
            This endpoint reads all LDAP groups.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The groups.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.DeleteGroupAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the LDAP group.
            </summary>
            <param name="groupName"><para>[required]</para>
            The name of the LDAP group
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.WriteUserAsync(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            This endpoint creates or updates LDAP users policies and group associations.
            </summary>
            <param name="username"><para>[required]</para>
            The name of the user
            </param>
            <param name="policies"><para>[required]</para>
            List of policies associated to the user.
            </param>
            <param name="groups"><para>[required]</para>
            List of groups associated to the user.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>        
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadUserAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint reads LDAP user.
            </summary>
            <param name="username"><para>[required]</para>
            The name of user
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The user.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.ReadAllUsersAsync(System.String,System.String)">
            <summary>
            This endpoint reads all LDAP users.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The users.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod.DeleteUserAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the LDAP user.
            </summary>
            <param name="username"><para>[required]</para>
            The name of the LDAP user
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the LDAP backend. Defaults to <see cref="F:VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths.LDAP" />
            Provide a value only if you have customized the mount point.</param>  
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo">
            <summary>
            Represents the login information for the LDAP Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo">
            <summary>
            Represents the login information for the OCI Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.RoleName">
            <summary>
            Gets the name of the role against which the login is being attempted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.RequestHeaders">
            <summary>
            Gets the request headers.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo"/> class.
            </summary>
            <param name="rolename">The Name of the role against which the login is being attempted..</param>
            <param name="requestHeaders">Signed request headers for authenticating. 
            For details on signing, see https://docs.cloud.oracle.com/iaas/Content/API/Concepts/signingrequests.htm
            </param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="rolename">The Name of the role against which the login is being attempted..</param>
            <param name="requestHeaders">Signed request headers for authenticating. 
            For details on signing, see https://docs.cloud.oracle.com/iaas/Content/API/Concepts/signingrequests.htm
            </param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo">
            <summary>
            Represents the login information for the Okta Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo">
            <summary>
            Represents the login information for the RADIUS Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest">
            <summary>
            Token creation options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Id">
            <summary>
            The ID of the client token. 
            Can only be specified by a root token. 
            Otherwise, the token ID is a randomly generated value.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.RoleName">
            <summary>
            The name of the token role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Policies">
            <summary>
            A list of policies for the token. 
            This must be a subset of the policies belonging to the token making the request, unless root. 
            If not specified, defaults to all the policies of the calling token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Metadata">
            <summary>
            A map of string to string valued metadata. 
            This is passed through to the audit devices.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.NoParent">
            <summary>
            When set to true, the token created will not have a parent.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.NoDefaultPolicy">
            <summary>
            If true the default policy will not be contained in this token's policy set.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Renewable">
            <summary>
            Set to false to disable the ability of the token to be renewed past its initial TTL. 
            Setting the value to true will allow the token to be renewable up to the system/mount maximum TTL.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.TimeToLive">
            <summary>
            The TTL period of the token, provided as "1h", where hour is the largest suffix. 
            If not provided, the token is valid for the default lease TTL, or indefinitely if the root policy is used.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.TokenType">
            <summary>
            The token type. Can be "batch" or "service". 
            Defaults to the type specified by the role configuration named by role_name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.ExplicitMaxTimeToLive">
            <summary>
             If set, the token will have an explicit max TTL set upon it. 
             This maximum token TTL cannot be changed later, and unlike with normal tokens, 
             updates to the system/mount max TTL value will have no effect at renewal time -- 
             the token will never be able to be renewed or used past the value set at issue time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.DisplayName">
            <summary>
            The display name of the token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.NumberOfUses">
            <summary>
            The maximum uses for the given token. 
            This can be used to create a one-time-token or limited use token. 
            The value of 0 has no limit to the number of uses.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.Period">
            <summary>
            If specified, the token will be periodic; 
            it will have no maximum TTL (unless an "explicit-max-ttl" is also set) 
            but every renewal will use the given period. 
            Requires a root token or one with the sudo capability.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.CreateTokenRequest.EntityAlias">
            <summary>
            Name of the entity alias to associate with during token creation. 
            Only works in combination with role_name argument and used entity alias 
            must be listed in allowed_entity_aliases. 
            If this has been specified, the entity will not be inherited from the parent.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod">
            <summary>
            Token Auth Method
            </summary>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.CreateTokenAsync(VaultSharp.V1.AuthMethods.Token.CreateTokenRequest)">
            <summary>
            Creates a new token. 
            Certain options are only available when called by a root token. 
            If you are creating an orphaned token, a root token is not required to create an orphan token 
            (otherwise set with the no_parent option). 
            If used with a role name, the token will be created against the specified role name; 
            this may override options set during this call.
            </summary>
            <param name="createTokenRequest">The token creation request</param>
            <returns>Auth info</returns>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.LookupSelfAsync">
            <summary>
            Gets the calling client token information. i.e. the token used by the client as part of this call.
            </summary>
            <returns>
            The secret with <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo" />.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.RenewSelfAsync(System.String)" -->
        <member name="M:VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod.RevokeSelfAsync">
            <summary>
            Revokes the calling client token and all child tokens.
            When the token is revoked, all secrets generated with it are also revoked.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo">
            <summary>
            Represents the information associated with the calling token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo.Accessor">
            <summary>
            Gets or sets the accessor.
            </summary>
            <value>
            The accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo.ExplicitMaximumTimeToLive">
            <summary>
            Gets or sets the explicit maximum time to live.
            </summary>
            <value>
            The explicit maximum time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo">
            <summary>
            Represents the information associated with a token accessor.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.CreationTimeToLive">
            <summary>
            Gets or sets the creation time to live.
            </summary>
            <value>
            The creation time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.Orphan">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo"/> is orphan.
            </summary>
            <value>
              <c>true</c> if orphan; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo.Type">
            <summary>
            Gets or sets the type
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo">
            <summary>
            Represents the information associated with a token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.Id">
            <summary>
            <para>[optional]</para>
            Gets or sets the ID of the client token. Can only be specified by a root token. 
            Otherwise, the token ID is a randomly generated UUID.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.Policies">
            <summary>
            <para>[optional]</para>
            Gets or sets a list of policies for the token. 
            This must be a subset of the policies belonging to the token making the request, unless root. 
            If not specified, defaults to all the policies of the calling token.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.Metadata">
            <summary>
            <para>[optional]</para>
            Gets or sets a map of string to string valued metadata. 
            This is passed through to the audit backends.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.CreatedByPath">
            <summary>
            Gets or sets the path used to create the token in the first place.
            </summary>
            <value>
            The created by path.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.DisplayName">
            <summary>
            <para>[optional]</para>
            Gets or sets the display name of the token. 
            Defaults to "token".
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.MaximumUsageCount">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum uses for the given token. 
            This can be used to create a one-time-token or limited use token. 
            Defaults to 0, which has no limit to number of uses.
            </summary>
            <value>
            The maximum usage count.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.LastRenewalTime">
            <summary>
            Gets or sets a value indicating when this token was last renewed.
            </summary>
            <value>
              The epoch of the last renewal time
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.ExpireTime">
            <summary>
            Gets or sets the expire time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.IdentityPolicies">
            <summary>
            <para>[optional]</para>
            Gets or sets a list of identity policies for the token. 
            </summary>
            <value>
            The identity policies.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.Models.TokenInfo.IssueTime">
            <summary>
            Gets or sets the issue time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo">
            <summary>
            Represents the login information for the Token Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo.VaultToken">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo" /> class.
            </summary>
            <param name="vaultToken">The token.</param>
        </member>
        <member name="T:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo">
            <summary>
            Represents the login information for the UserPass Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.AuthMethodType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:VaultSharp.V1.Commons.AbstractBackend">
            <summary>
            Represents backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Path">
            <summary>
            Gets or sets the path. If not set, the value will default to the type value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Accessor">
            <summary>
            Gets or sets the accessor.
            </summary>
            <value>
            The accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Config">
            <summary>
            Gets or sets the config options.
            </summary>
            <value>
            The config options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Description">
            <summary>
            Gets or sets a human-friendly description of the backend.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Local">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag indicating if this is a local mount.
            </summary>
            <remarks>
            The option is allowed in Vault open-source, but relevant functionality is only supported in Vault Enterprise:
            </remarks>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.SealWrap">
            <summary>
            Gets or sets a seal wrap flag for the backend.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.PluginName">
            <summary>
            Gets or sets the plugin name.
            </summary>
            <value>
            The plugin name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AbstractBackend.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.AuthInfo">
            <summary>
            Represents the authorization information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.ClientTokenAccessor">
            <summary>
            Gets or sets the client token accessor.
            </summary>
            <value>
            The client token accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.ClientToken">
            <summary>
            Gets or sets the client token.
            </summary>
            <value>
            The client token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.Policies">
            <summary>
            Gets or sets the policies.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.Metadata">
            <summary>
            Gets or sets any metadata associated with this authorization info.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.LeaseDurationSeconds">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
            <value>
            The lease duration seconds.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.AuthInfo.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.Commons.AuthInfo"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.CurrentSecretMetadata">
            <summary>
            Represents the current Secret Metadata.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.CurrentSecretMetadata.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.FullSecretMetadata">
            <summary>
            Represents the full Secret Metadata.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.CreatedTime">
            <summary>
            Gets or sets the created time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.CurrentVersion">
            <summary>
            Gets or sets the current version.
            </summary>
            <value>
            The current version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.MaxVersion">
            <summary>
            Gets or sets the max version.
            </summary>
            <value>
            The max version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.OldestVersion">
            <summary>
            Gets or sets the oldest version.
            </summary>
            <value>
            The oldest version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.UpdatedTime">
            <summary>
            Gets or sets the deletion time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.FullSecretMetadata.Versions">
            <summary>
            Gets or sets the versions.
            </summary>
            <value>
            The versions.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.ListInfo">
            <summary>
            Represents the list of keys.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.ListInfo.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.Secret`1">
            <summary>
            Represents a Vault SecretsEngine with lease information and generic data.
            </summary>
            <typeparam name="TData">The type of the data contained in the secret.</typeparam>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.LeaseId">
            <summary>
            Gets or sets the lease identifier.
            </summary>
            <value>
            The lease identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.SecretsEngines.SecretsEngine"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.LeaseDurationSeconds">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
            <value>
            The lease duration seconds.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.WrapInfo">
            <summary>
            Gets or sets the wrapped information.
            </summary>
            <value>
            The wrapped information.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.Warnings">
            <summary>
            Gets or sets the warnings.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.Secret`1.AuthInfo">
            <summary>
            Gets or sets the authorization information.
            </summary>
            <value>
            The authorization information.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.SecretData">
            <summary>
            Represents a Vault Secret Data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretData`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretData`1.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.SecretMetadata">
            <summary>
            Represents a Vault Secret Metadata.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretMetadata.CreatedTime">
            <summary>
            Gets or sets the created time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretMetadata.DeletionTime">
            <summary>
            Gets or sets the deletion time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.SecretMetadata.Destroyed">
            <summary>
            Gets or sets the destroyed flag.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="T:VaultSharp.V1.Commons.WrapInfo">
            <summary>
            Represents the wrapped information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.Accessor">
            <summary>
            Gets or sets the wrapped accessor.
            </summary>
            <value>
            The wrapped accessor.
            </value>
        </member>
        <member name="P:VaultSharp.V1.Commons.WrapInfo.CreationPath">
            <summary>
            Gets or sets the creation path.
            </summary>
            <value>
            The creation path.
            </value>
        </member>
        <member name="T:VaultSharp.V1.IVaultClientV1">
            <summary>
            The V1 interface for the Vault Api.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.IVaultClientV1.Secrets">
            <summary>
            The Secrets Engine interface.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.IVaultClientV1.Auth">
            <summary>
            The Auth Method interface.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.IVaultClientV1.System">
            <summary>
            The System Backend interface.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials">
            <summary>
            Represents the Active Directory credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials.CurrentPassword">
            <summary>
            Gets or sets the current password.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials.LastPassword">
            <summary>
            Gets or sets the last password.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine">
            <summary>
            The Active Directory Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Offers the credential information for a given role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the AD backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.ActiveDirectory" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials">
            <summary>
            Represents the AliCloud credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.AccessKey">
            <summary>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.SecurityToken">
            <summary>
            Gets or sets the STS token.
            </summary>
            <value>
            The secret token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine">
            <summary>
            The AliCloud Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic AliCloud RAM credential based on the named role.
            </summary>
            <param name="aliCloudRoleName"><para>[required]</para>
            Name of the AliCloud role.</param>
            <param name="aliCloudMountPoint"><para>[optional]</para>
            The mount point for the AliCloud backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.AliCloud" />
            Provide a value only if you have customized the AliCloud mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials">
            <summary>
            Represents the AWS credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials.AccessKey">
            <summary>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials.SecurityToken">
            <summary>
            Gets or sets the STS token.
            </summary>
            <value>
            The secret token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.AWSRoleModel">
            <summary>
            Role definition.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine">
            <summary>
            The AWS Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic IAM AWS credential based on the named role.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.GenerateSTSCredentialsAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic IAM AWS credential  with an STS token based on the named role.
            The TTL will be 3600 seconds (one hour).
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="timeToLive"><para>[optional]</para>
            Time to live. Defaults to 1 hour</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.AWS.AWSCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint lists all existing roles in the secrets engine.
            </summary>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries an existing role by the given name.
            If invalid role data was supplied to the role from an earlier version of Vault, 
            then it will show up in the response as invalid_data.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of role names.</returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials">
            <summary>
            Represents the Azure credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials.ClientId">
            <summary>
            Gets or sets the Client Id.
            </summary>
            <value>
            The Client Id.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials.ClientSecret">
            <summary>
            Gets or sets the Client secret.
            </summary>
            <value>
            The Client secret.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Azure.IAzureSecretsEngine">
            <summary>
            Azure Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Azure.IAzureSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Azure token based on the role definition.
            </summary>
            <param name="azureRoleName"><para>[required]</para>
            Name of the Azure role.</param>
            <param name="azureBackendMountPoint"><para>[optional]</para>
            The mount point for the Azure backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Azure" />
            Provide a value only if you have customized the Azure mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Azure.AzureCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials">
            <summary>
            Represents the Consul credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine">
            <summary>
            Consul Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Consul token based on the role definition.
            </summary>
            <param name="consulRoleName"><para>[required]</para>
            Name of the Consul role.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine">
            <summary>
            Cubbyhole Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.ReadSecretAsync(System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="secretPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.ReadSecretPathsAsync(System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="folderPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.WriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Stores a secret at the specified location.
            </summary>
            <param name="secretPath"><para>[required]</para>
            The location path where the secret needs to be stored.</param>
            <param name="values"><para>[required]</para>
            The values to be written. The values will be overwritten.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine.DeleteSecretAsync(System.String)">
            <summary>
            Deletes the secret at the specified location.
            </summary>
            <param name="secretPath"><para>[required]</para>
            The location path where the secret needs to be deleted from.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviders">
            <summary>
            Names of supported database providers
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType">
            <summary>
            A helper class for retrieving and comparing DatabaseProviderTypes.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.MySQL">
            <summary>
            Gets the MySql provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.PostgreSQL">
            <summary>
            Gets the PostgreSQL provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.MongoDB">
            <summary>
            Gets the MongoDB provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Oracle">
            <summary>
            Gets the Oracle provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.RedShift">
            <summary>
            Gets the RedShift provider name.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Type">
            <summary>
            Gets the type type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.op_Equality(VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType,VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.op_Inequality(VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType,VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Equals(VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine">
            <summary>
            Database Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.CreateRoleAsync(System.String,VaultSharp.V1.SecretsEngines.Database.Role,System.String)">
            <summary>
            This endpoint creates or updates a role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="role"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to read. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadAllRolesAsync(System.String,System.String)">
            <summary>
            This endpoint returns a list of available roles. 
            Only the role names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.DeleteRoleAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to delete. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role to create credentials against.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.CreateStaticRoleAsync(System.String,VaultSharp.V1.SecretsEngines.Database.StaticRole,System.String)">
            <summary>
            This endpoint creates or updates a static role definition. 
            Static Roles are a 1-to-1 mapping of a Vault Role to a user in a database which are automatically 
            rotated based on the configured rotation_period. 
            Not all databases support Static Roles, please see the database-specific documentation.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to create. </param>
            <param name="staticRole"><para>[required]</para>
            Specifies the request options. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>        
            <returns>The task</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadStaticRoleAsync(System.String,System.String,System.String)">
            <summary>
            This endpoint queries the static role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to read. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.ReadAllStaticRolesAsync(System.String,System.String)">
            <summary>
            This endpoint returns a list of available static roles. 
            Only the role names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.DeleteStaticRoleAsync(System.String,System.String)">
            <summary>
            This endpoint deletes the static role definition and revokes the database user.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to delete. </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>   
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.GetStaticCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of STATIC credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the static role to get credentials for.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Database.StaticCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine.RotateStaticCredentialsAsync(System.String,System.String)">
            <summary>
            This endpoint is used to rotate the Static Role credentials stored for a given role name. 
            While Static Roles are rotated automatically by Vault at configured rotation periods, 
            users can use this endpoint to manually trigger a rotation to change the stored password and 
            reset the TTL of the Static Role's password.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the static role to rotate credentials for.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Database backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Database" />
            Provide a value only if you have customized the mount point.</param>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.Role">
            <summary>
            Role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.DatabaseProviderType">
            <summary>
            The name of the database connection to use for this role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.DefaultTimeToLive">
            <summary>
            Specifies the TTL for the leases associated with this role. 
            Accepts time suffixed strings ("1h") or an integer number of seconds. 
            Defaults to system/engine default TTL time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.MaximumTimeToLive">
            <summary>
            Specifies the maximum TTL for the leases associated with this role. 
            Accepts time suffixed strings ("1h") or an integer number of seconds. 
            Defaults to system/mount default TTL time; 
            this value is allowed to be less than the mount max TTL 
            (or, if not set, the system max TTL), but it is not allowed to be longer.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.CreationStatements">
            <summary>
            Specifies the database statements executed to create and configure a user.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.RevocationStatements">
            <summary>
            Specifies the database statements to be executed to revoke a user.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.RollbackStatements">
            <summary>
            Specifies the database statements to be executed rollback a create operation in the event of an error. 
            Not every plugin type will support this functionality. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.Role.RenewStatements">
            <summary>
            Specifies the database statements to be executed to renew a user. 
            Not every plugin type will support this functionality.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.StaticCredentials">
            <summary>
            Static credential definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticCredentials.LastVaultRotation">
            <summary>
            Specifies the last time Vault rotated this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticCredentials.RotationPeriod">
            <summary>
            Specifies the rotation period for this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticCredentials.TimeToLive">
            <summary>
            Specifies the remaining time for the creds.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Database.StaticRole">
            <summary>
            Static role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.Username">
            <summary>
            Specifies the database username that this Vault role corresponds to.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.DatabaseProviderType">
            <summary>
            The name of the database connection to use for this role.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.RotationStatements">
            <summary>
            Specifies the database statements to be executed to rotate the password for the configured database user. 
            Not every plugin type will support this functionality. 
            See the plugin's API page for more information on support and formatting for this parameter.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Database.StaticRole.RotationPeriod">
            <summary>
            Specifies the amount of time Vault should wait before rotating the password. 
            The minimum is 5 seconds.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptionResponse">
            <summary>
            Decryption output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptionResponse.PlainText">
            <summary>
             Decrypted plain text.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions">
            <summary>
            Decryption input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for decryption. 
             This is required for asymmetric keys. 
             For symmetric keys, Cloud KMS will choose the correct version automatically.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions.CipherText">
            <summary>
             Ciphertext to decrypt as previously returned from an encrypt operation. 
             This must be base64-encoded ciphertext as previously returned from an encrypt operation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions.AdditionalAuthenticatedData">
            <summary>
            Optional data that was specified during encryption of this payload.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse">
            <summary>
            Encryption output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse.KeyVersion">
            <summary>
             Integer version of the crypto key.
            </summary>
            <remarks>
            raja todo: why is this not int?
            </remarks>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse.CipherText">
            <summary>
            Encrypted cipher text.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions">
            <summary>
            Encryption input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for encryption. 
             If unspecified, this defaults to the latest active crypto key version.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions.PlainText">
            <summary>
             Plaintext value to be encrypted. 
             This can be a string or binary, but the size is limited. 
             See the Google Cloud KMS documentation for information on size limitations by key types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions.AdditionalAuthenticatedData">
            <summary>
             Optional base64-encoded data that, if specified, must also be provided to decrypt this payload.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine">
            <summary>
            GoogleCloud KMS Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.EncryptAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to encrypt arbitrary plaintext string data. 
            The response will be base64-encoded encrypted ciphertext.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for encryption. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="encryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.DecryptAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to decrypt the ciphertext string. 
            For symmetric key types, the provided ciphertext must come from a previous invocation of the /encrypt endpoint. 
            For asymmetric key types, the provided ciphertext must be from the encrypt operation 
            against the corresponding key version's public key.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for decryption. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="decryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with plain text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.ReEncryptAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to re-encrypt the underlying cryptokey to the latest version for this ciphertext without disclosing the original plaintext value to the requestor. 
            This is similar to "rewrapping" in Vault's transit secrets engine.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for encryption. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="reEncryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.SignAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to sign digest string data. 
            The response will include the base64-encoded signature.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for signing. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="signatureOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with signed text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine.VerifyAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions,System.String,System.String)">
            <summary>
            This endpoint uses the named encryption key to verify a signature and digest string data.
            </summary>
            <param name="keyName">
            [required]
            Name of the key in Vault to use for verifying. 
            This key must already exist in Vault and must map back to a Google Cloud KMS key. 
            </param>
            <param name="verificationOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloudKMS" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with verified text.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse">
            <summary>
            ReEncryption output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse.KeyVersion">
            <summary>
             Integer version of the crypto key.
            </summary>
            <remarks>
            raja todo: why is this not int?
            </remarks>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse.CipherText">
            <summary>
            ReEncrypted cipher text.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions">
            <summary>
            ReEncryption input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions.KeyVersion">
            <summary>
            Integer version of the crypto key version to use for re-encryption. 
            If unspecified, this defaults to the latest active crypto key version.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions.CipherText">
            <summary>
             Ciphertext to be re-encrypted to the latest key version. 
             This must be ciphertext that Vault previously generated for this named key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions.AdditionalAuthenticatedData">
            <summary>
            Optional data that, if specified, must also be provided during decryption.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions">
            <summary>
            Signature input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for signing. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions.Digest">
            <summary>
             Digest to sign. 
             This digest is the base64 encoded binary value, 
             and must match the signing algorithm digest of the Cloud KMS key,
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureResponse">
            <summary>
            Signature output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureResponse.Signature">
            <summary>
            The signature
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions">
            <summary>
            Verification input.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions.KeyVersion">
            <summary>
             Integer version of the crypto key version to use for verifying.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions.Digest">
            <summary>
             Digest that was signed. 
             This digest is the base64 encoded binary value, and must match the signing algorithm 
             digest of the Cloud KMS key. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions.Signature">
            <summary>
            Signature of the digest as returned from a signing operation.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationResponse">
            <summary>
            Verification output.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationResponse.Valid">
            <summary>
            Flag to indicate if signature is valid.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token">
            <summary>
            Represents the GoogleCloud OAuth2 Token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey">
            <summary>
            Represents the GoogleCloud ServiceAccountKey.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey.Base64EncodedPrivateKeyData">
            <summary>
            Gets or sets the private_key_data.
            </summary>
            <value>
            The private_key_data.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey.KeyAlgorithm">
            <summary>
            Gets or sets the Key algorithm used to generate key. 
            </summary>
            <value>
            The key_algorithm.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey.PrivateKeyType">
            <summary>
            Gets or sets the key_type.
            </summary>
            <value>
            The key_type.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine">
            <summary>
            GoogleCloud Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine.GetOAuth2TokenAsync(System.String,System.String,System.String)">
            <summary>
            Generates an OAuth2 token with the scopes defined on the roleset. 
            This OAuth access token can be used in GCP API calls.
            Tokens are non-renewable and have a TTL of an hour by default.
            </summary>
            <param name="roleset"><para>[required]</para>
            Name of an roleset with secret type access_token to generate access_token under.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloud" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine.GetServiceAccountKeyAsync(System.String,VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm,VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType,System.String,System.String)">
            <summary>
            Generates a service account key.
            These keys are renewable and have TTL/max TTL as defined by either the backend config or the 
            system default if config was not defined.
            </summary>
            <param name="roleset"><para>[required]</para>
            Name of an roleset with secret type service_account_key to generate key under.
            </param>
            <param name="keyAlgorithm"><para>[optional]</para>
            Key algorithm used to generate key. 
            Defaults to 2k RSA key You probably should not choose other values (i.e. 1k).
            </param>
            <param name="privateKeyType"><para>[optional]</para>
             Private key type to generate. Defaults to JSON credentials file. 
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.GoogleCloud" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm">
            <summary>
            Represents the ServiceAccountKeyAlgorithm.
            https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm.KEY_ALG_UNSPECIFIED">
            <summary>
            An unspecified key algorithm.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm.KEY_ALG_RSA_1024">
            <summary>
            1k RSA Key.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm.KEY_ALG_RSA_2048">
            <summary>
            2k RSA Key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType">
            <summary>
            Represents the ServiceAccountPrivateKeyType.
            https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountPrivateKeyType
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType.TYPE_UNSPECIFIED">
            <summary>
            Unspecified. Equivalent to TYPE_GOOGLE_CREDENTIALS_FILE.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType.TYPE_PKCS12_FILE">
            <summary>
            PKCS12 format. 
            The password for the PKCS12 file is notasecret. 
            For more information, see https://tools.ietf.org/html/rfc7292.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType.TYPE_GOOGLE_CREDENTIALS_FILE">
            <summary>
            Google Credentials File format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.IdentityToken">
            <summary>
            Represents the IdentityToken
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.IdentityToken.ClientId">
            <summary>
            Gets or sets the Client Id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.IdentityToken.Token">
            <summary>
            Gets or sets the token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Identity.IdentityToken.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine">
            <summary>
            Identity Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.GetTokenAsync(System.String,System.String,System.String)">
            <summary>
            Use this endpoint to generate a signed ID (OIDC) token.
            </summary>
            <param name="roleName"><para>[required]</para>
            The name of the role against which to generate a signed ID token.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Identity" />
            Provide a value only if you have customized the Azure mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Identity.IdentityToken" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine.IntrospectTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            This endpoint can verify the authenticity and active state of a signed ID token.
            </summary>
            <param name="token"><para>[required]</para>
            A signed OIDC compliant ID token.
            </param>
            <param name="clientId"><para>[optional]</para>
            Specifying the client ID optimizes validation time
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Identity" />
            Provide a value only if you have customized the Azure mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            Indicates if the token is active.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.ISecretsEngine">
            <summary>
            The secrets engine interface.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.ActiveDirectory">
            <summary>
            The ActiveDirectory Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.AliCloud">
            <summary>
            The AliCloud Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.AWS">
            <summary>
            The AWS Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Azure">
            <summary>
            The Azure Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Consul">
            <summary>
            The Consul Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Cubbyhole">
            <summary>
            The Cubbyhole Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Database">
            <summary>
            The Database Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.GoogleCloud">
            <summary>
            The GoogleCloud Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.GoogleCloudKMS">
            <summary>
            The GoogleCloud KMS Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Identity">
            <summary>
            The Identity Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.KMIP">
            <summary>
            The KMIP Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.KeyValue">
            <summary>
            The KeyValue Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.MongoDBAtlas">
            <summary>
            The MongoDBAtlas Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Nomad">
            <summary>
            The Nomad Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.OpenLDAP">
            <summary>
            The OpenLDAP Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.PKI">
            <summary>
            The PKI Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.RabbitMQ">
            <summary>
            The RabbitMQ Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.SSH">
            <summary>
            The SSH Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.TOTP">
            <summary>
            The TOTP Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Transform">
            <summary>
            The Transform Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.ISecretsEngine.Transit">
            <summary>
            The Transit Secrets Engine.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine">
            <summary>
            The KeyValue Secrets Engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine.V1">
            <summary>
            The V1 version of the KeyValue secrets engine.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine.V2">
            <summary>
            The V2 version of the KeyValue secrets engine.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1">
            <summary>
            V1 of Key Value Secrets Engine
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.ReadSecretAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV1" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.ReadSecretAsync``1(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KeyValue backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV1" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.ReadSecretPathsAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV1" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.WriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="values"><para>[required]</para>
            The value to be written.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV1" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The taskwith the secret.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.WriteSecretAsync``1(System.String,``0,System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="values"><para>[required]</para>
            The value to be written.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV1" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1.DeleteSecretAsync(System.String,System.String)">
            <summary>
            Deletes the value at the specified path in Vault.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV1" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2">
            <summary>
            V2 of Key Value Secrets Engine
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretAsync(System.String,System.Nullable{System.Int32},System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretAsync``1(System.String,System.Nullable{System.Int32},System.String,System.String)" -->
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretPathsAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="path"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.ReadSecretMetadataAsync(System.String,System.String,System.String)" -->
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.WriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32},System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="data"><para>[required]</para>
            The value to be written.</param>
            <param name="checkAndSet">
            <para>[optional]</para>
            If not set the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. 
            If the index is non-zero the write will only be allowed if the key’s current version matches the version specified in the cas parameter.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task with the secret.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.WriteSecretAsync``1(System.String,``0,System.Nullable{System.Int32},System.String)">
            <summary>
            Stores a secret at the specified location. If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="data"><para>[required]</para>
            The value to be written.</param>
            <param name="checkAndSet">
            <para>[optional]</para>
            If not set the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. 
            If the index is non-zero the write will only be allowed if the key’s current version matches the version specified in the cas parameter.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
            <remarks>
            Unlike other secrets engines, the KV secrets engine does not enforce TTLs for expiration. 
            Instead, the lease_duration is a hint for how often consumers should check back for a new value. 
            This is commonly displayed as refresh_interval instead of lease_duration to clarify this in output.
            If provided a key of ttl, the KV secrets engine will utilize this value as the lease duration:
            Even with a ttl set, the secrets engine never removes data on its own.The ttl key is merely advisory.
            When reading a value with a ttl, both the ttl key and the refresh interval will reflect the value:
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DeleteSecretAsync(System.String,System.String)">
            <summary>
            This endpoint issues a soft delete of the secret's latest version at the specified location. 
            This marks the version as deleted and will stop it from being returned from reads, 
            but the underlying data will not be removed. A delete can be undone using the Undelete method.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to delete.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DeleteSecretVersionsAsync(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            This endpoint issues a soft delete of the secret's latest version at the specified location. 
            This marks the version as deleted and will stop it from being returned from reads, 
            but the underlying data will not be removed. A delete can be undone using the Undelete method.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to delete.</param>
            <param name="versions">
            <para>[required]</para>
            The versions to delete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.UndeleteSecretVersionsAsync(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Undeletes the data for the provided version and path in the key-value store.
            This restores the data, allowing it to be returned on get requests.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to undelete.</param>
            <param name="versions">
            <para>[required]</para>
            The versions to undelete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DestroySecretAsync(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Permanently removes the specified version data for the provided key and version numbers from the key-value store.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="versions">
            <para>[required]</para>
            The versions to destroy. Their data will be permanently deleted.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2.DeleteMetadataAsync(System.String,System.String)">
            <summary>
            This endpoint permanently deletes the key metadata and all version data for the specified key. 
            All version history will be removed.
            </summary>
            <param name="path"><para>[required]</para>
            Specifies the path of the secret to delete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KeyValueV2" />
            Provide a value only if you have customized the mount point.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KMIP.CertificateFormat">
            <summary>
            Represents the Certificate format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.KMIP.CertificateFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.KMIP.CertificateFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.KMIP.CertificateFormat.pem">
            <summary>
            The PEM encoded format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.KMIP.CertificateFormat.pem_bundle">
            <summary>
            The PEM Bundle encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KMIP.IKMIPSecretsEngine">
            <summary>
            KMIP Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.KMIP.IKMIPSecretsEngine.GetCredentialsAsync(System.String,System.String,VaultSharp.V1.SecretsEngines.KMIP.CertificateFormat,System.String,System.String)">
            <summary>
            Generates a new client certificate tied to the given role and scope.
            </summary>
            <param name="scopeName"><para>[required]</para>
            Name of the KMIP scope.</param>
            <param name="roleName"><para>[required]</para>
            Name of the KMIP role.</param>
            <param name="format"><para>[required]</para>
            Format to return the certificate, private key, and CA chain in.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the KMIP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.KMIP" />
            Provide a value only if you have customized the KMIP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.KMIP.KMIPCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.KMIP.KMIPCredentials">
            <summary>
            Represents the KMIP credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KMIP.KMIPCredentials.CAChainContent">
            <summary>
            Gets or sets the ca chain content.
            </summary>
            <value>
            The content of the ca chain.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KMIP.KMIPCredentials.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KMIP.KMIPCredentials.PrivateKeyContent">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.KMIP.KMIPCredentials.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.MongoDBAtlas.IMongoDBAtlasSecretsEngine">
            <summary>
            MongoDBAtlas Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.MongoDBAtlas.IMongoDBAtlasSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic MongoDBAtlas cred based on the role definition.
            </summary>
            <param name="name"><para>[required]</para>
            Unique identifier name of the credential
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the MongoDBAtlas backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.MongoDBAtlas" />
            Provide a value only if you have customized the MongoDBAtlas mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials">
            <summary>
            Represents the MongoDBAtlas credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.LeaseDuration">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.LeaseRenewable">
            <summary>
            Gets or sets the lease renewable flag.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.Description">
            <summary>
            Gets or sets the description of the creds.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Nomad.INomadSecretsEngine">
            <summary>
            Nomad Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Nomad.INomadSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Nomad token based on the role definition.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of an existing role against which to create this Nomad token.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Nomad backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Nomad" />
            Provide a value only if you have customized the Nomad mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials">
            <summary>
            Represents the Nomad credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials.AccessorId">
            <summary>
            Gets or sets the accessor id.
            </summary>
            <value>
            The accessor id.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials.SecretId">
            <summary>
            Gets or sets the secret id.
            </summary>
            <value>
            The secret id.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.OpenLDAP.IOpenLDAPSecretsEngine">
            <summary>
            Cubbyhole Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.OpenLDAP.IOpenLDAPSecretsEngine.GetStaticCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of STATIC credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the static role to get credentials for.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the OpenLDAP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.OpenLDAP" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials">
            <summary>
            Static credential definition.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.DistinguishedName">
            <summary>
            Specifies the Distinguished Name
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.LastVaultRotation">
            <summary>
            Specifies the last vault rotation for this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.RotationPeriod">
            <summary>
            Specifies the rotation period for this cred.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials.TimeToLive">
            <summary>
            Specifies the remaining time for the creds.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData">
            <summary>
            Represents the generated Certificate.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.CertificateFormat">
            <summary>
            Gets or sets the certificate format.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.IssuingCACertificateContent">
            <summary>
            Gets or sets the content of the issuing ca certificate.
            </summary>
            <value>
            The content of the issuing ca certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.CAChainContent">
            <summary>
            Gets or sets the ca chain content.
            </summary>
            <value>
            The content of the ca chain.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials">
            <summary>
            Represents the generated Certificate credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials.PrivateKeyContent">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials.PrivateKeyType">
            <summary>
            Gets or sets the type of the private key.
            </summary>
            <value>
            The type of the private key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions">
            <summary>
            Represents the Certificate credentials request options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.CommonName">
            <summary>
            <para>[required]</para>
            Gets or sets the requested CN for the certificate. 
            If the CN is allowed by role policy, it will be issued.
            </summary>
            <value>
            The name of the common.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.SubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Subject Alternative Names, in a comma-delimited list. 
            These can be host names or email addresses; they will be parsed into their respective fields. 
            If any requested names do not match role policy, the entire request will be denied.
            </summary>
            <value>
            The subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.IPSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested IP Subject Alternative Names, in a comma-delimited list. 
            Only valid if the role allows IP SANs (which is the default).
            </summary>
            <value>
            The ip subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.URISubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested URI Subject Alternative Names, in a comma-delimited list.
            </summary>
            <value>
            The uri subject alternative names.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.OtherSubjectAlternativeNames" -->
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Time To Live. 
            Cannot be greater than the role's max_ttl value. 
            If not provided, the role's ttl value will be used. 
            Note that the role values default to system values if not explicitly set.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.CertificateFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the certificate format for returned data. 
            Can be pem or der; defaults to pem. 
            If der, the output is base64 encoded..
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.PrivateKeyFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the the format for marshaling the private key. 
            Defaults to der which will return either base64-encoded DER or PEM-encoded DER, 
            depending on the value of format. 
            The other option is pkcs8 which will return the key marshalled as PEM-encoded PKCS8.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat">
            <summary>
            Represents the Certificate format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.pem">
            <summary>
            The PEM encoded format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.pem_bundle">
            <summary>
            The PEM Bundle encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType">
            <summary>
            Represents the Certificate key type.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.rsa">
            <summary>
            The RSA Key type.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType.ec">
            <summary>
            The Elliptic Curve key type.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest">
            <summary>
            Represents the Certificate Tidy Request.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest.TidyCertStore">
            <summary>
            Specifies whether to tidy up the certificate store. Defaults to false.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest.TidyRevokedCerts">
            <summary>
            Set to true to expire all revoked and expired certificates, removing them both from the CRL and from storage. 
            The CRL will be rotated if this causes any values to be removed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest.SafetyBuffer">
            <summary>
            Specifies A duration (given as an integer number of seconds or a string; defaults to 72h) 
            Used as a safety buffer to ensure certificates are not expunged prematurely; 
            as an example, this can keep certificates from being removed from the CRL that, due to clock skew,
            might still be considered valid on other hosts. 
            For a certificate to be expunged, the time must be after the expiration time of the certificate 
            (according to the local clock) plus the duration of safety_buffer.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine">
            <summary>
            The PKI Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.GetCredentialsAsync(System.String,VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions,System.String,System.String)">
            <summary>
            Generates a new set of credentials (private key and certificate) based on the role named in the endpoint.
            The issuing CA certificate is returned as well, so that only the root CA need be in a client's trust store.
            The private key is not stored.
            If you do not save the private key, you will need to request a new certificate.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.
            </param>
            <param name="certificateCredentialRequestOptions"><para>[required]</para>
            The certificate credential request options.
            </param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the new Certificate credentials.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.RevokeCertificateAsync(System.String,System.String)">
            <summary>
            This endpoint revokes a certificate using its serial number. 
            This is an alternative option to the standard method of revoking using Vault lease IDs.
            A successful revocation will rotate the CRL.
            </summary>
            <param name="serialNumber"><para>[required]</para>
            Specifies the serial number of the certificate to revoke, in hyphen-separated or colon-separated octal.
            </param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The secret with the Certificate revokation info.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.TidyAsync(VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest,System.String)">
            <summary>
            This endpoint allows tidying up the storage backend and/or CRL by removing certificates that have expired 
            and are past a certain buffer period beyond their expiration time.
            </summary>
            <param name="certificateTidyRequest">The request object</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine.ReadCACertificateAsync(VaultSharp.V1.SecretsEngines.PKI.CertificateFormat,System.String)">
            <summary>
            Retrieves the CA certificate in raw DER-encoded form. 
            This is a bare endpoint that does not return a standard Vault data structure. 
            The CA certificate can be returned in DER or PEM format.
            This is an unauthenticated endpoint.
            </summary>
            <param name="certificateFormat"><para>[optional]</para>
            The certificate format needed.
            Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.PKI.CertificateFormat.der" /></param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.PKI" />
            Provide a value only if you have customized the PKI mount point.
            </param>
            <returns>
            The raw certificate data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat">
            <summary>
            Represents the Private key format.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat.pkcs8">
            <summary>
            The PKCS8 encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData">
            <summary>
            Represents the raw certificate contents.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData.RevocationTime">
            <summary>
            Gets or sets the revocation time.
            </summary>
            <value>
            The revocation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RawCertificateData.EncodedCertificateFormat">
            <summary>
            Gets or sets the encoded certificate format.
            </summary>
            <value>
            The encoded certificate format.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.PKI.RevokeCertificateResponse">
            <summary>
            Represents the Certificate revocation response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.PKI.RevokeCertificateResponse.RevocationTime">
            <summary>
            Gets or sets the revocation time.
            </summary>
            <value>
            The revocation time.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine">
            <summary>
            The RabbitMQ Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the role to create credentials against.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.RabbitMQ" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SecretsEngine">
            <summary>
            Represents a secret backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngine.Type">
            <summary>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SecretsEngineType">
            <summary>
            A helper class for retrieving and comparing SecretsEngine Backend types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.System">
            <summary>
            Gets the system type.
            </summary>
            <value>
            The system.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.AliCloud">
            <summary>
            Gets the alicloud type.
            </summary>
            <value>
            The aws.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.AWS">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Consul">
            <summary>
            Gets the consul type.
            </summary>
            <value>
            The consul.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.CubbyHole">
            <summary>
            Gets the cubby hole type.
            </summary>
            <value>
            The cubby hole.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.KeyValueV1">
            <summary>
            Gets the generic type v1.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.KeyValueV2">
            <summary>
            Gets the generic type v2.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Identity">
            <summary>
            Gets the Identity type.
            </summary>
            <value>
            The Identity.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Nomad">
            <summary>
            Gets the Nomad type.
            </summary>
            <value>
            The Nomad.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.PKI">
            <summary>
            Gets the pki type.
            </summary>
            <value>
            The pki.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.RabbitMQ">
            <summary>
            Gets the rabbit mq type.
            </summary>
            <value>
            The rabbit mq.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.SSH">
            <summary>
            Gets the SSH type.
            </summary>
            <value>
            The SSH.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.TOTP">
            <summary>
            Gets the TOTP type.
            </summary>
            <value>
            The TOTP.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Transit">
            <summary>
            Gets the transit type.
            </summary>
            <value>
            The transit.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SecretsEngineType.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SecretsEngines.SecretsEngineType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.op_Equality(VaultSharp.V1.SecretsEngines.SecretsEngineType,VaultSharp.V1.SecretsEngines.SecretsEngineType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.op_Inequality(VaultSharp.V1.SecretsEngines.SecretsEngineType,VaultSharp.V1.SecretsEngines.SecretsEngineType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.Equals(VaultSharp.V1.SecretsEngines.SecretsEngineType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SecretsEngines.SecretsEngineType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine">
            <summary>
            The SSH Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine.GetCredentialsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic SSH credentials for a specific username and IP Address based on the named role.
            </summary>
            <param name="roleName"><para>[required]</para>
            Name of the SSH Role.</param>
            <param name="ipAddress"><para>[required]</para>
            The ip address of the remote host.</param>
            <param name="username"><para>[optional]</para>
            The username on the remote host.</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the SSH credentials.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine.SignKeyAsync(System.String,VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest,System.String)">
            <summary>
            This endpoint signs an SSH public key based on the supplied parameters, 
            subject to the restrictions contained in the role named in the endpoint.
            </summary>
            <param name="roleName"><para>[required]</para>
            Specifies the name of the role to sign.</param>
            <param name="signKeyRequest"><para>[required]</para>
            The request parameters</param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>The signed key</returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse">
            <summary>
            Response from signing a key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse.SerialNumber">
            <summary>
            The serial number of the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse.SignedKey">
            <summary>
            The signed key
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest">
            <summary>
            Request for signing a key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.PublicKey">
            <summary>
            <para>[required]</para>
            Specifies the SSH public key that should be signed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.TimeToLive">
            <summary>
            <para>[optional]</para>
            Specifies the Requested Time To Live. 
            Cannot be greater than the role's max_ttl value. 
            If not provided, the role's ttl value will be used. 
            Note that the role values default to system values if not explicitly set.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.ValidPrincipals">
            <summary>
            <para>[optional]</para>
            Specifies valid principals, either usernames or hostnames, that the certificate should be signed for.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.CertificateType">
            <summary>
            <para>[required]</para>
            Specifies the type of certificate to be created; either "user" or "host".
            Defaults to "user"
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.KeyId">
            <summary>
            <para>[optional]</para>
            Specifies the key id that the created certificate should have. 
            If not specified, the display name of the token will be used.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.CriticalOptions">
            <summary>
            <para>[optional]</para>
            Specifies a map of the critical options that the certificate should be signed for.
            Defaults to none.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest.Extension">
            <summary>
            <para>[optional]</para>
            Specifies a map of the extensions that the certificate should be signed for. Defaults to none.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials">
            <summary>
            SSH Credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.KeyType">
            <summary>
            Type of credentials
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.SSH.SSHCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType">
            <summary>
            Represents the type of SSH key to be generated.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType.otp">
            <summary>
            The one time password.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType.dynamic">
            <summary>
            The dynamic key.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.SSH.SSHKeyType.ca">
            <summary>
            The ca key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.AbstractTOTPKeyGenerationOption.Issuer">
            <summary>
            Gets or sets the name of the issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.AbstractTOTPKeyGenerationOption.AccountName">
            <summary>
            Gets or sets the name of the account associated with the key.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine">
            <summary>
            The TOTP Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.GetCodeAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new time-based one-time use password based on the named key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to create credentials against.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.ValidateCodeAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Generates a new time-based one-time use password based on the named key.
            </summary>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the key to create credentials against.
            </param>
            <param name="code"><para>[required]</para>
            Specifies the the password you want to validate.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.CreateKeyAsync(System.String,VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest,System.String)">
            <summary>
            This endpoint creates or updates a key definition.
            </summary>
            <param name="keyName"><para>[required]</para>
            The name of the key.
            </param>
            <param name="createKeyRequest"><para>[required]</para>
            The create key options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <returns>The barcode and url of the key.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.ReadKeyAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves a TOTP key.
            </summary>
            <param name="keyName"><para>[required]</para>
            The name of the key to retrieve.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Key Info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.ReadAllKeysAsync(System.String,System.String)">
            <summary>
            Returns a list of available keys. Only the key names are returned, not any values.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.TOTP" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>List of available keys</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine.DeleteKeyAsync(System.String,System.String)">
            <summary>
            Deletes a TOTP key.
            </summary>
            <param name="keyName"><para>[required]</para>
            The name of the key to delete.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the TOTP backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.TOTP" />
            Provide a value only if you have customized the TOTP mount point.</param>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode">
            <summary>
            Represents the TOTP Code.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCode.Code">
            <summary>
            Gets or sets the TOTP code.
            </summary>
            <value>
            The TOTP code.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCodeValidity">
            <summary>
            Represents the TOTP Code validity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCodeValidity.Valid">
            <summary>
            Gets or sets the TOTO code validity.
            </summary>
            <value>
            The TOTP code validity.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.KeyGenerationOption">
            <summary>
            Gets or sets if a key should be generated by Vault or if a key is being passed from another service.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Issuer">
            <summary>
            Gets or sets the name of the issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.AccountName">
            <summary>
            Gets or sets the name of the account associated with the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Period">
            <summary>
            Specifies the length of time in seconds used to generate a counter for the TOTP code calculation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Algorithm">
            <summary>
            Specifies the hashing algorithm used to generate the TOTP code. 
            Options include "SHA1", "SHA256" and "SHA512".
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest.Digits">
            <summary>
            Gets or sets the number of digits in the generated TOTP code.
            This value can be set to 6 or 8.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse">
            <summary>
            Represents the result when creating a new key
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse.Barcode">
            <summary>
            Gets or sets the Barcode
            </summary>
            <remarks>
            If a QR code is returned, it consists of base64-formatted PNG bytes.
            You can embed it in a web page by including the base64 string
            in an 'img'-tag with the prefix data:image/png;base64
            </remarks>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse.Url">
            <summary>
            Gets or sets the Url
            </summary>
            <remarks>
            The Url can be used by the client application in order to create
            TOTP codes.
            </remarks>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey">
            <summary>
            Represents a queried key
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.AccountName">
            <summary>
            Gets or sets the name of the account associated with the key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Algorithm">
            <summary>
            Gets or sets the used hashing algorithm.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Digits">
            <summary>
            Gets or sets the number of digits in the generated TOTP code.
            This value can be set to 6 or 8.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Issuer">
            <summary>
            Gets or sets the name of the issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPKey.Period">
            <summary>
            Gets or sets the length of time in seconds used to
            create a counter for the TOTP code calculation.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration">
            <summary>
            Specifies that the key is generated by some other service.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration.Url">
            <summary>
            Specifies the TOTP key url string that can be used to configure a key. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration.Key">
            <summary>
            Specifies the master key used to generate a TOTP code.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration">
            <summary>
            Specifies that the key should be generated by Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.Exported">
            <summary>
             Specifies if a QR code and url are returned upon generating a key. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.KeySize">
            <summary>
            Specifies the size in bytes of the Vault generated key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.Skew">
            <summary>
            Specifies the number of delay periods that are allowed when validating a TOTP code. 
            This value can be either 0 or 1.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration.QRSize">
            <summary>
            Specifies the pixel size of the square QR code when generating a new key.
            Only used if and exported is true. 
            If this value is 0, a QR code will not be returned.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.DecodedItem">
            <summary>
            Represents a single Decoded item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodedItem.DecodedValue">
            <summary>
            Specifies the decoded value.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodedItem.Tweak">
            <summary>
            Specifies the base64 encoded tweak that was provided during encoding.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.DecodedResponse">
            <summary>
            Response for decoding.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodedResponse.DecodedItems">
            <summary>
            Decoded items.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.DecodeRequestOptions">
            <summary>
            Represents the Decode Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodeRequestOptions.BatchItems">
            <summary>
            Specifies the transformation within the role that should be used for this decode operation. 
            If a single transformation exists for role, this parameter may be skipped and will be inferred. 
            If multiple transformations exist, one must be specified.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.DecodingItem">
            <summary>
            Represents a single Decoding item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodingItem.Value">
            <summary>
            Specifies the value to be decoded.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodingItem.Transformation">
            <summary>
            Specifies the transformation within the role that should be used for this decode operation. 
            If a single transformation exists for role, this parameter may be skipped and will be inferred. 
            If multiple transformations exist, one must be specified.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.DecodingItem.Tweak">
            <summary>
            Specifies the base64 decoded tweak to use. 
            Only applicable for FPE transformations with supplied as the tweak source.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.EncodedItem">
            <summary>
            Represents a single Encoded item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodedItem.EncodedValue">
            <summary>
            Specifies the encoded value.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodedItem.Tweak">
            <summary>
            Specifies the base64 encoded tweak that was provided during encoding.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.EncodedResponse">
            <summary>
            Response for encoding.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodedResponse.EncodedItems">
            <summary>
            Encoded items.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.EncodeRequestOptions">
            <summary>
            Represents the Encode Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodeRequestOptions.BatchItems">
            <summary>
            Specifies a list of items to be encoded in a single batch. 
            When this parameter is set, the 'value', 'transformation' and 'tweak' parameters are ignored. 
            Instead, the aforementioned parameters should be provided within each object in the list.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.EncodingItem">
            <summary>
            Represents a single Encoding item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodingItem.Value">
            <summary>
            Specifies the value to be encoded.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodingItem.Transformation">
            <summary>
            Specifies the transformation within the role that should be used for this encode operation. 
            If a single transformation exists for role, this parameter may be skipped and will be inferred. 
            If multiple transformations exist, one must be specified.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transform.EncodingItem.Tweak">
            <summary>
            Specifies the base64 encoded tweak to use. 
            Only applicable for FPE transformations with supplied as the tweak source.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transform.ITransformSecretsEngine">
            <summary>
            The Transform Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transform.ITransformSecretsEngine.EncodeAsync(System.String,VaultSharp.V1.SecretsEngines.Transform.EncodeRequestOptions,System.String,System.String)">
            <summary>
            This endpoint encodes the provided value using a named role.
            </summary>
            <param name="roleName">
            [required]
            Specifies the role name to use for this operation.
            </param>
            <param name="encodeRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transform backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Transform" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with encoded text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transform.ITransformSecretsEngine.DecodeAsync(System.String,VaultSharp.V1.SecretsEngines.Transform.DecodeRequestOptions,System.String,System.String)">
            <summary>
            This endpoint decodes the provided value using a named role.
            </summary>
            <param name="roleName">
            [required]
            Specifies the role name to use for this operation.
            </param>
            <param name="decodeRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transform backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Transform" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with decoded text.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.CipherTextData">
            <summary>
            Represents the Cipher text data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.CipherTextData.CipherText">
            <summary>
            Gets or sets the cipher text.
            </summary>
            <value>
            The cipher text.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions">
            <summary>
            Represents the Data Key Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions.Base64EncodedContext">
            <summary>
            [required]
             Specifies the base64 encoded context for key derivation. 
             This is required if key derivation is enabled for this key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions.Nonce">
            <summary>
            [optional]
            Specifies the base64 encoded nonce value. 
            This must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. 
            Not required for keys created in 0.6.2+. 
            The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context 
            (and thus, any given encryption key) this nonce value is never reused.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions.Bits">
            <summary>
            [optional]
            Specifies the number of bits in the desired key. Can be 128, 256, or 512.
            Defaults to 256.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse">
            <summary>
            Represents the data key response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse.Base64EncodedPlainText">
            <summary>
            Gets or sets the plain text.
            </summary>
            <value>
            The plain text.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse.CipherText">
            <summary>
            Gets or sets the cipher text.
            </summary>
            <value>
            The cipher text.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem">
            <summary>
            Represents a single Decryption item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.CipherText">
            <summary>
            [required]
            Specifies cipher text to be decrypted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.Base64EncodedContext">
            <summary>
            [required]
             Specifies the base64 encoded context for key derivation. 
             This is required if key derivation is enabled for this key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionItem.Nonce">
            <summary>
            [optional]
            Specifies the base64 encoded nonce value. 
            This must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. 
            Not required for keys created in 0.6.2+. 
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DecryptionResponse">
            <summary>
            Represents the decryption response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptionResponse.BatchedResults">
            <summary>
            Gets or sets the batch results.
            </summary>
            <value>
            The batch results.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions">
            <summary>
            Represents the Decrypt Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions.BatchedDecryptionItems">
            <summary>
            [optional]
            Specifies a list of items to be decrypted in a single batch. 
            When this parameter is set, if the parameters 'ciphertext', 'context' and 'nonce' are also set, they will be ignored.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem">
            <summary>
            Represents a single Encryption item.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.Base64EncodedPlainText">
            <summary>
            [required]
            Specifies base64 encoded plaintext to be encrypted.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.Base64EncodedContext">
            <summary>
            [required]
             Specifies the base64 encoded context for key derivation. 
             This is required if key derivation is enabled for this key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionItem.Nonce">
            <summary>
            [optional]
            Specifies the base64 encoded nonce value. 
            This must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. 
            Not required for keys created in 0.6.2+. 
            The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context 
            (and thus, any given encryption key) this nonce value is never reused.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptionResponse">
            <summary>
            Represents the encryption response.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptionResponse.BatchedResults">
            <summary>
            Gets or sets the batch results.
            </summary>
            <value>
            The batch results.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions">
            <summary>
            Represents the Encrypt Request Options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions.KeyVersion">
            <summary>
            [optional]
             Specifies the version of the key to use for encryption. 
             If not set, uses the latest version. 
             Must be greater than or equal to the key's min_encryption_version, if set.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions.BatchedEncryptionItems">
            <summary>
            [optional]
            Specifies a list of items to be encrypted in a single batch. 
            When this parameter is set, if the parameters 'plaintext', 'context' and 'nonce' are also set, they will be ignored.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions.KeyType">
            <summary>
            [required/optional]
            This parameter is required when encryption key is expected to be created. 
            When performing an upsert operation, the type of key to create.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions.ConvergentEncryption">
            <summary>
            This parameter will only be used when a key is expected to be created. 
            Whether to support convergent encryption. 
            This is only supported when using a key with key derivation enabled and will require all requests to carry both a 
            context and 96-bit (12-byte) nonce. 
            The given nonce will be used in place of a randomly generated nonce. 
            As a result, when the same context and nonce are supplied, the same ciphertext is generated. 
            It is very important when using this mode that you ensure that all nonces are unique for a given context. 
            Failing to do so will severely impact the ciphertext's security.
            </summary>
            <value>
              <c>true</c> if [convergent encryption]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions"/>.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine">
            <summary>
            The Transit Secrets Engine.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.EncryptAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions,System.String,System.String)">
            <summary>
            Encrypts the provided plaintext using the named key.
            This path supports the create and update policy capabilities as follows: 
            if the user has the create capability for this endpoint in their policies, 
            and the key does not exist, it will be upserted with default values 
            (whether the key requires derivation depends on whether the context parameter is empty or not). 
            If the user only has update capability and the key does not exist, an error will be returned.
            </summary>
            <param name="keyName">
            [required]
            Specifies the name of the encryption key to encrypt against.
            </param>
            <param name="encryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.DecryptAsync(System.String,VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions,System.String,System.String)">
            <summary>
            Decrypts the provided ciphertext using the named key.
            </summary>
            <param name="keyName">
            [required]
            Specifies the name of the encryption key to decrypt against.
            </param>
            <param name="decryptRequestOptions"><para>[required]</para>
            The options.
            </param>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with plain text.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.ReadAllEncryptionKeysAsync(System.String,System.String)">
            <summary>
            Returns a list of keys. Only the key names are returned.
            </summary>
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of key names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine.GenerateDataKeyAsync(System.String,System.String,VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions,System.String,System.String)">
            <summary>
            This endpoint generates a new high-entropy key and the value encrypted with the named key. 
            Optionally return the plaintext of the key as well.
            Whether plaintext is returned depends on the path; as a result, you can use Vault ACL policies to control whether a user is allowed to retrieve the plaintext value of a key. 
            This is useful if you want an untrusted user or operation to generate keys that are then made available to trusted users.
            </summary>
            <param name="keyType"><para>[required]</para>
             Specifies the type of key to generate.
             If plaintext, the plaintext key will be returned along with the ciphertext.
             If wrapped, only the ciphertext value will be returned. 
            </param>
            <param name="keyName"><para>[required]</para>
            Specifies the name of the encryption key to use to encrypt the datakey.
            </param>
            <param name="dataKeyRequestOptions"></param>
            The Options
            <param name="mountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="F:VaultSharp.V1.SecretsEngines.SecretsEngineDefaultPaths.Transit" />
            Provide a value only if you have customized the mount point.
            </param>
            <param name="wrapTimeToLive">
            <para>[optional]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with data key response.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.PlainTextData">
            <summary>
            Represents the Plain text data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.Transit.PlainTextData.Base64EncodedPlainText">
            <summary>
            Gets or sets the plain text.
            </summary>
            <value>
            The plain text.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType">
            <summary>
            Represents the type of Transit key to be generated.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.aes256_gcm96">
            <summary>
            AES-256 wrapped with GCM using a 12-byte nonce size (symmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SecretsEngines.Transit.TransitKeyType.ecdsa_p256">
            <summary>
            ECDSA using the P-256 elliptic curve (asymmetric)
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials">
            <summary>
            Represents credentials with a username and password.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AbstractAuditBackend">
            <summary>
            Represents an audit backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.MountPoint">
            <summary>
            Gets or sets the mount point. If not set, the value will default to the <see cref="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Type"/> value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Description">
            <summary>
            <para>[optional]</para>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Local">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag indicating if this is a local mount.
            </summary>
            <remarks>
            The option is allowed in Vault open-source, but relevant functionality is only supported in Vault Enterprise:
            </remarks>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions">
            <summary>
            Represents the base class for audit backend options.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.Format">
            <summary>
            Gets or sets the format.
            Allows selecting the output format. 
            Valid values are json (the default) and jsonx, which formats the normal log entries as XML.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.HmacAccessor">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [hmac accessor].
            A boolean, if set, enables the hashing of token accessor. 
            Defaults to true. 
            This option is useful only when <see cref="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.LogSensitiveDataInRawFormat"/> is false.
            </summary>
            <value>
              <c>true</c> if [hmac accessor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.LogSensitiveDataInRawFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [log sensitive data in raw format].
            Defaults to <value>"false"</value>.
            </summary>
            <value>
            <c>true</c> if [log sensitive data in raw format]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AbstractPolicyBase">
            <summary>
            Represents an abstract Vault Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AbstractPolicyBase.Name">
            <summary>
            Gets or sets the name of the policy.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.ACLPolicy">
            <summary>
            Represents a Vault ACL Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.ACLPolicy.Policy">
            <summary>
            Gets or sets the policy document. 
            This can be base64-encoded to avoid string escaping.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditBackendJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SystemBackend.AbstractAuditBackend" /> object from JSON.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.NotImplementedException">Unnecessary because CanWrite is false. The type will skip the converter.</exception>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditBackendType">
            <summary>
            A helper class for retrieving and comparing Audit Backend types.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SystemBackend.AuditBackendType._value">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendType.File">
            <summary>
            Gets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendType.Syslog">
            <summary>
            Gets the syslog.
            </summary>
            <value>
            The syslog.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditBackendType.Value">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.AuditBackendType"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.op_Equality(VaultSharp.V1.SystemBackend.AuditBackendType,VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.op_Inequality(VaultSharp.V1.SystemBackend.AuditBackendType,VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.Equals(VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SystemBackend.AuditBackendType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.AuditHash">
            <summary>
            Represents the Audit hash.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.AuditHash.Hash">
            <summary>
            Gets or sets a the hash.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.CORSConfig">
            <summary>
            CORS configuration.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CORSConfig.Enabled">
            <summary>
            Gets or sets a flag denoting if CORS is enabled.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CORSConfig.AllowedOrigins">
            <summary>
            Gets or sets the allowed origins. 
            Use of wildcard '*' is allowed.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CORSConfig.AllowedHeaders">
            <summary>
            Gets or sets the strings specifying headers that are permitted to be on cross-origin requests. 
            Headers set via this parameter will be appended to the list of headers that Vault allows by default.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.CustomAuditBackend">
            <summary>
            Represents a custom <see cref="T:VaultSharp.V1.SystemBackend.AuditBackendType"/> based audit backend.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.CustomAuditBackend.#ctor(VaultSharp.V1.SystemBackend.AuditBackendType)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.CustomAuditBackend"/> class.
            </summary>
            <param name="auditBackendType">Type of the audit backend.</param>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CustomAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the generic options. Use any key/value pairs suitable for the custom audit backend.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.CustomAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.EncryptionKeyStatus">
            <summary>
            Represents information about the encryption key used by Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.EncryptionKeyStatus.InstallTime">
            <summary>
            Gets or sets the install time for the key.
            </summary>
            <value>
            The install time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.EncryptionKeyStatus.SequentialKeyNumber">
            <summary>
            Gets or sets the sequential key number.
            </summary>
            <value>
            The sequential key number.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase">
            <summary>
            Represents a Vault GP Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase.Policy">
            <summary>
            Gets or sets the policy document. 
            This can be base64-encoded to avoid string escaping.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase.EnforcementLevel">
            <summary>
            Gets or sets the enforcement level to use. 
            This must be one of advisory, soft-mandatory, or hard-mandatory.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroup.MaxTimeToLive">
            <summary>
            Gets or sets the maximum ttl for a control group wrapping token. 
            This can be in seconds or duration 
            </summary>
            <value>
            The max ttl.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization">
            <summary>
            Authorization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization.EntityId">
            <summary>
            Gets or sets the entity id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization.EntityName">
            <summary>
            Gets or sets the entity name.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity">
            <summary>
            The requesting entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus">
            <summary>
            Control group status
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.Approved">
            <summary>
            Gets or sets the approval status.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.RequestPath">
            <summary>
            Gets or sets the request path.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.RequestEntity">
            <summary>
            Gets or sets the requesting entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus.Authorizations">
            <summary>
            Gets or sets the authorizations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy">
            <summary>
            Represents a Vault EGP Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy.Paths">
            <summary>
            Gets or sets the paths.
            </summary>
            <value>
            The paths.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel">
            <summary>
            The EnforcementLevel class.
            </summary>
        </member>
        <member name="F:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel._value">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Advisory">
            <summary>
            Gets the Advisory level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.SoftMandatory">
            <summary>
            Gets the SoftMandatory level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.HardMandatory">
            <summary>
            Gets the HardMandatory level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Value">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.op_Equality(VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel,VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.op_Inequality(VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel,VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Equals(VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider">
            <summary>
            Enterprise System backend APIs
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise">
            <summary>
            Enterprise System backend APIs
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetControlGroupConfigAsync">
            <summary>
            Gets the current Control Group configuration.
            </summary>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>Config</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.ConfigureControlGroupAsync(System.String)">
            <summary>
            Configures control groups.
            </summary>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <param name="maxTimeToLive">The maximum ttl for a control group wrapping token. This can be provided in seconds or duration (2h).</param>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.DeleteControlGroupConfigAsync">
            <summary>
            Removes any control group configuration.
            </summary>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.AuthorizeControlGroupAsync(System.String)">
            <summary>
            Authorizes a control group request.
            </summary>
            <param name="accessor"><para>[required]</para>
            The accessor for the control group wrapping token.</param>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>Authorization.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.CheckControlGroupStatusAsync(System.String)">
            <summary>
            Checks the status of a control group request.
            </summary>
            <param name="accessor"><para>[required]</para>
            The accessor for the control group wrapping token.</param>
            <remarks>
            Requires Enterprise Vault.
            </remarks>
            <returns>The status.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetLicenseAsync">
            <summary>
            Returns information about the currently installed license.
            </summary>
            <returns>License.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.InstallLicenseAsync(System.String)">
            <summary>
            Used to install a license into Vault.
            </summary>
            <param name="licenceText"><para>[required]</para>
            The license text.
            </param>
            <returns>Task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetRGPPoliciesAsync">
            <summary>
            Gets all the RGP policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetRGPPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named RGP policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.WriteRGPPolicyAsync(VaultSharp.V1.SystemBackend.Enterprise.RGPPolicy)">
            <summary>
            Adds or updates the RGP policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.DeleteRGPPolicyAsync(System.String)">
            <summary>
            Deletes the named RGP policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetEGPPoliciesAsync">
            <summary>
            Gets all the EGP policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.GetEGPPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named EGP policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.WriteEGPPolicyAsync(VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy)">
            <summary>
            Adds or updates the EGP policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Enterprise.IEnterprise.DeleteEGPPolicyAsync(System.String)">
            <summary>
            Deletes the named EGP policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.License">
            <summary>
            License information.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.ExpirationTime">
            <summary>
            Gets or sets the license expiration time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.Features">
            <summary>
            Gets or sets the features.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.LicenseId">
            <summary>
            Gets or sets the license id.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Enterprise.License.StartTime">
            <summary>
            Gets or sets the license start time.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Enterprise.RGPPolicy">
            <summary>
            Represents a Vault RGP Policy entity.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.FileAuditBackend">
            <summary>
            Represents the <see cref="P:VaultSharp.V1.SystemBackend.AuditBackendType.File"/> based audit backend.
            This audit backend writes audit logs to a file.
            This is a very simple audit backend: it appends logs to a file.
            It does not currently assist with any log rotation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackend.Path">
            <summary>
            <para>[optional]</para>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.FileAuditBackendOptions">
            <summary>
            Represents the options for the <see cref="T:VaultSharp.V1.SystemBackend.FileAuditBackend"/>.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.FileAuditBackendOptions.FilePath">
            <summary>
            <para>[required]</para>
            Gets or sets the path to where the file will be written. 
            If this path exists, the audit backend will append to it.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.HealthStatus">
            <summary>
            Represents the health status of a Vault instance.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Initialized">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is initialized.
            </summary>
            <value>
              <c>true</c> if initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Sealed">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is sealed.
            </summary>
            <value>
              <c>true</c> if sealed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Standby">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is a standby.
            </summary>
            <value>
              <c>true</c> if standby; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.PerformanceStandby">
            <summary>
            Gets or sets the performance standby.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ReplicationPerformanceMode">
            <summary>
            Gets or sets the replication performance mode.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ReplicationDisasterRecoverymode">
            <summary>
            Gets or sets the replication dr mode.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ServerTimeUtcUnixTimestamp">
            <summary>
            Gets or sets the server time UTC unix timestamp.
            </summary>
            <value>
            The server time UTC unix timestamp.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ClusterName">
            <summary>
            Gets or sets the name of the cluster.
            </summary>
            <value>
            The name of the cluster.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ClusterId">
            <summary>
            Gets or sets the cluster identifier.
            </summary>
            <value>
            The cluster identifier.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.ServerTimeUtc">
            <summary>
            Gets the friendly server time from ServerTimeUtcUnixTimestamp 
            which is in seconds since January 1, 1970 12:00:00 a.m. UTC.
            </summary>
            <value>
            The server time in UTC. (zero offset)
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.HealthStatus.HttpStatusCode">
            <summary>
            Gets or sets the code.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.InitOptions">
            <summary>
            Represents the initialization options for Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.PgpKeys">
            <summary>
            <para>[required]</para>
            Gets or sets the PGP keys.
            An array of PGP public keys used to encrypt the output unseal keys. 
            Ordering is preserved. The keys must be base64-encoded from their original binary representation. 
            The size of this array must be the same as <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares"/>.
            </summary>
            <value>
            The PGP keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.RootTokenPgpKey">
            <summary>
            <para>[optional]</para>
            Gets or sets a PGP public key used to encrypt the initial root token. 
            The key must be base64-encoded from its original binary representation.
            </summary>
            <value>
            The root token pgp key.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares">
            <summary>
            <para>[required]</para>
            Gets or sets the number of shares to split the master key into.
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.SecretThreshold">
            <summary>
            <para>[required]</para>
            Gets or sets the secret threshold.
            The number of shares required to reconstruct the master key. 
            This must be less than or equal to <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares"/>. 
            If using Vault HSM with auto-unsealing, this value must be the same as <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares"/>.
            </summary>
            <value>
            The secret threshold.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.StoredShares">
            <summary>
            <para>[required]</para>
            Gets or sets the stored shares.
            The number of shares that should be encrypted by the HSM and stored for auto-unsealing (Vault HSM only). 
            Currently must be the same as <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.SecretShares"/>.
            </summary>
            <remarks>
            Only supported on Vault Pro/Enterprise
            </remarks>
            <value>
            The stored shares.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.RecoveryShares">
            <summary>
            <para>[required]</para>
            Gets or sets the recovery shares.
            The number of shares to split the recovery key into (Vault HSM only).
            </summary>
            <remarks>
            Only supported on Vault Pro/Enterprise
            </remarks>
            <value>
            The recovery shares.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.RecoveryThreshold">
            <summary>
            <para>[required]</para>
            Gets or sets the recovery threshold.
            The number of shares required to reconstruct the recovery key (Vault HSM only). 
            This must be less than or equal to <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.RecoveryShares"/>.
            </summary>
            <remarks>
            Only supported on Vault Pro/Enterprise
            </remarks>
            <value>
            The recovery threshold.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.InitOptions.RecoveryPgpKeys">
            <summary>
            <para>[optional]</para>
            Gets or sets the recovery PGP keys.
            An array of PGP public keys used to encrypt the output recovery keys (Vault HSM only). 
            Ordering is preserved. The keys must be base64-encoded from their original binary representation. 
            The size of this array must be the same as <see cref="P:VaultSharp.V1.SystemBackend.InitOptions.RecoveryShares"/>.
            </summary>
            <remarks>
            Only supported on Vault Pro/Enterprise
            </remarks>
            <value>
            The recovery PGP keys.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.ISystemBackend">
            <summary>
            The system backend.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.ISystemBackend.Enterprise">
            <summary>
            Gets the enterprise functionality provider.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.ISystemBackend.MFA">
            <summary>
            Gets the MFA provider.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.ISystemBackend.Plugins">
            <summary>
            Gets the plugin provider.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetAuditBackendsAsync">
            <summary>
            Gets all the mounted audit backends (it does not list all available audit backends).
            </summary>
            <returns>
            The mounted audit backends.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.MountAuditBackendAsync(VaultSharp.V1.SystemBackend.AbstractAuditBackend)">
            <summary>
            Mounts a new audit backend at the specified mount point.
            </summary>
            <param name="abstractAuditBackend">The audit backend.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.UnmountAuditBackendAsync(System.String)">
            <summary>
            Unmounts the audit backend at the given mount point.
            </summary>
            <param name="path"><para>[required]</para>
            The mount point for the audit backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.AuditHashAsync(System.String,System.String)">
            <summary>
            Hash the given input data with the specified audit backend's hash function and salt.
            This endpoint can be used to discover whether a given plaintext string (the input parameter) appears in
            the audit log in obfuscated form.
            Note that the audit log records requests and responses; since the Vault API is JSON-based,
            any binary data returned from an API call (such as a DER-format certificate) is base64-encoded by
            the Vault server in the response, and as a result such information should also be base64-encoded
            to supply into the <see cref="!:inputToHash" /> parameter.
            </summary>
            <param name="path"><para>[required]</para>
            The mount point for the audit backend. (with or without trailing slashes. it doesn't matter)</param>
            <param name="inputToHash"><para>[required]</para>
            The input value to hash</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetAuthBackendsAsync">
            <summary>
            Gets all the enabled authentication backends.
            </summary>
            <returns>
            The enabled authentication backends.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.MountAuthBackendAsync(VaultSharp.V1.AuthMethods.AuthMethod)">
            <summary>
            Mounts a new authentication backend.
            The auth backend can be accessed and configured via the auth path specified in the URL. 
            </summary>
            <param name="authBackend">The authentication backend.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.UnmountAuthBackendAsync(System.String)">
            <summary>
            Unmounts the authentication backend at the given mount point.
            </summary>
            <param name="path"><para>[required]</para>
            The authentication path for the authentication backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetAuthBackendConfigAsync(System.String)">
            <summary>
            Gets the mounted authentication backend's configuration values.
            The lease values for each TTL may be the system default ("0" or "system") or a mount-specific value.
            </summary>
            <param name="path"><para>[required]</para>
            The authentication path for the authentication backend in which to tune. 
            (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The mounted secret backend's configuration values.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ConfigureAuthBackendAsync(System.String,VaultSharp.Core.BackendConfig)">
            <summary>
            Tunes the mount configuration parameters for the given <see cref="!:path" />.
            </summary>
            <param name="path"><para>[required]</para>
            The authentication path for the authentication backend. (with or without trailing slashes. it doesn't matter)</param>
            <param name="backendConfig"><para>[required]</para>
            The mount configuration with the required setting values.
            Provide a value of <value>"0"</value> for the TTL settings if you want to use the system defaults.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetTokenCapabilitiesAsync(System.String,System.String)">
            <summary>
            Gets the capabilities of the token on the given path.
            </summary>
            <param name="path"><para>[required]</para>
            Path on which the token's capabilities will be checked.</param>
            <param name="token"><para>[required]</para>
            Token for which capabilities are being queried.</param>
            <returns>The list of capabilities.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetTokenCapabilitiesByAcessorAsync(System.String,System.String)">
            <summary>
            Gets the capabilities of the token associated with the accessor on the given path.
            </summary>
            <param name="path"><para>[required]</para>
            Path on which the token's capabilities will be checked.</param>
            <param name="tokenAccessor"><para>[required]</para>
            Accessor to the Token for which capabilities are being queried.</param>
            <returns>The list of capabilities.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetCallingTokenCapabilitiesAsync(System.String)">
            <summary>
            Gets the capabilities of the calling token.
            </summary>
            <param name="path"><para>[required]</para>
            Path on which the token's capabilities will be checked.</param>
            <returns>The list of capabilities.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetAuditRequestHeadersAsync">
            <summary>
            Gets the request headers configured to be audited.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetAuditRequestHeaderAsync(System.String)">
            <summary>
            Gets a particular request header.
            </summary>
            <param name="name">The name of the header.</param>
            <returns>Header details.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.PutAuditRequestHeaderAsync(System.String,System.Boolean)">
            <summary>
            Creates/updates the request header to be audited.
            </summary>
            <param name="name"><para>[required]</para>
            The name fo the header.
            </param>
            <param name="hmac"><para>[optional]</para>
            Specifies if this header's value should be HMAC'ed in the audit logs.
            </param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.DeleteAuditRequestHeaderAsync(System.String)">
            <summary>
            Deletes a particular request header.
            </summary>
            <param name="name">The name of the header.</param>
            <returns>Header details.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetCORSConfigAsync">
            <summary>
            Gets the current CORS configuration.
            </summary>
            <returns>Config</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ConfigureCORSAsync(VaultSharp.V1.SystemBackend.CORSConfig)">
            <summary>
            Configures CORS.
            </summary>
            <param name="corsConfig">
            The CORS Configuration.
            </param>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.DeleteCORSConfigAsync">
            <summary>
            Deletes the current CORS configuration.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetRootTokenGenerationStatusAsync">
            <summary>
            Gets the configuration and progress of the current root generation attempt.
            </summary>
            <returns>The root status</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.InitiateRootTokenGenerationAsync(System.String,System.String)">
            <summary>
            Initializes a new root generation attempt. 
            Only a single root generation attempt can take place at a time. 
            One (and only one) of <see cref="!:base64EncodedOneTimePassword"/> or <see cref="!:pgpKey"/> are required.
            </summary>
            <param name="base64EncodedOneTimePassword"><para>[optional]</para>
            A base64-encoded 16-byte value. The raw bytes of the token will be XOR'd with this 
            value before being returned to the final unseal key provider.</param>
            <param name="pgpKey"><para>[optional]</para>
            A base64-encoded PGP public key. The raw bytes of the token will be encrypted with this value before being 
            returned to the final unseal key provider.</param>
            <returns>The root token generation status.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.CancelRootTokenGenerationAsync">
            <summary>
            Cancels any in-progress root generation attempt. 
            This clears any progress made. 
            This must be called to change the OTP or PGP key being used.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ContinueRootTokenGenerationAsync(System.String,System.String)">
            <summary>
            Continues the root generation process.
            Enter a single master key share to progress the root generation attempt. 
            If the threshold number of master key shares is reached, 
            Vault will complete the root generation and issue the new token. 
            Otherwise, this API must be called multiple times until that threshold is met. 
            The attempt nonce must be provided with each call.
            </summary>
            <param name="masterShareKey"><para>[required]</para>
            A single master share key.</param>
            <param name="nonce"><para>[required]</para>
            The nonce of the root generation attempt.</param>
            <returns>
            An object indicating the attempt nonce, and completion status, 
            and the encoded root token, if the attempt is complete.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.QuickRootTokenGenerationAsync(System.String[],System.String)">
            <summary>
            Generates a root token in a single call. 
            Call this after calling the <see cref="M:VaultSharp.V1.SystemBackend.ISystemBackend.InitiateRootTokenGenerationAsync(System.String,System.String)"/> method.
            Provide all the master keys together.
            </summary>
            <param name="thresholdMasterShareKeys">Threshold master share keys.</param>
            <param name="nonce"><para>[required]</para>
            The nonce of the root generation attempt.</param>
            <returns>The final Status after all the share keys are applied.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetHealthStatusAsync(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Net.Http.HttpMethod)">
            <summary>
            Gets the health status of Vault. This provides a simple way to monitor the health of a Vault instance.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="standbyOk"><para>[optional]</para>
            A flag to indicate that being a standby should still return the active status code 
            instead of the standby status code of HTTP 429 (or whatever is provided as standbyStatusCode)
            DEFAULTs to <value>false</value>, meaning a standby code will be returned.
            This is useful when Vault is behind a non-configurable load balance that just wants a 200-level response.
            </param>
            <param name="activeStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an active node instead of the default successful response of HTTP 200.
            DEFAULTs to <value>200</value>, meaning the default HTTP 200 Status code will be returned.
            </param>
            <param name="standbyStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an standby node instead of the default error response of HTTP 429.
            DEFAULTs to <value>429</value>, meaning the default HTTP 429 Status code will be returned.
            </param>
            <param name="sealedStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an sealed node instead of the default error response of HTTP 503.
            DEFAULTs to <value>503</value>, meaning the default HTTP 503 Status code will be returned.
            </param>
            <param name="uninitializedStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an uninitialized vault node instead of the default error response of HTTP 501.
            DEFAULTs to <value>501</value>, meaning the default HTTP 501 Status code will be returned.
            </param>
            <param name="queryHttpMethod"><para>[optional]</para>
            The <see cref="T:System.Net.Http.HttpMethod"/> to be used to query vault. By default <see cref="P:System.Net.Http.HttpMethod.Get"/> will be used.
            You can change it to <see cref="P:System.Net.Http.HttpMethod.Head"/>.
            </param>
            <returns>
            The health status.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetInitStatusAsync">
            <summary>
            Gets the initialization status of Vault.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <returns>
            The initialization status of Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.InitAsync(VaultSharp.V1.SystemBackend.InitOptions)">
            <summary>
            Initializes a new Vault. The Vault must not have been previously initialized. 
            The recovery options, as well as the stored shares option, are only available when using Vault HSM.
            </summary>
            <param name="initOptions"><para>[required]</para>
            The initialization options.
            </param>
            <returns>
            An object including the (possibly encrypted, if pgp_keys was provided) master keys and initial root token.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetKeyStatusAsync">
            <summary>
            Gets information about the current encryption key used by Vault
            </summary>
            <returns>
            The status of the encryption key.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetLeaderAsync">
            <summary>
            Gets the high availability status and current leader instance of Vault.
            </summary>
            <returns>
            The leader info.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetLeaseAsync(System.String)">
            <summary>
            Gets the lease metadata.
            </summary>
            <param name="leaseId"><para>[required]</para>
            The lease id.
            </param>
            <returns>Info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetAllLeasesAsync(System.String)">
            <summary>
            Gets the list of lease ids.
            </summary>
            <param name="prefix"><para>[required]</para>
            The prefix for the leases.
            </param>
            <returns>The lease ids.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.RenewLeaseAsync(System.String,System.Int32)">
            <summary>
            Gets the lease metadata.
            </summary>
            <param name="leaseId"><para>[required]</para>
            The ID of the lease to extend.
            </param>
            <param name="incrementSeconds"><para>[required]</para>
            Specifies the requested amount of time (in seconds) to extend the lease.
            </param>
            <returns>Info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.RevokeLeaseAsync(System.String)">
            <summary>
            Revokes a lease immediately.
            </summary>
            <param name="leaseId"><para>[required]</para>
            The lease id.
            </param>
            <returns>Task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ForceRevokeLeaseAsync(System.String)">
            <summary>
            Revokes all secrets or tokens generated under a given prefix immediately. 
            Unlike <see cref="M:VaultSharp.V1.SystemBackend.ISystemBackend.RevokePrefixLeaseAsync(System.String)"/>, this path ignores backend errors encountered during revocation. 
            This is potentially very dangerous and should only be used in specific emergency situations where 
            errors in the backend or the connected backend service prevent normal revocation. 
            By ignoring these errors, Vault abdicates responsibility for ensuring that the issued 
            credentials or secrets are properly revoked and/or cleaned up.
            Access to this endpoint should be tightly controlled.
            </summary>
            <param name="prefix"><para>[required]</para>
            Specifies the prefix to revoke.
            </param>
            <returns>Task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.RevokePrefixLeaseAsync(System.String)">
            <summary>
            Revokes revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately. 
            This requires sudo capability and access to it should be tightly controlled as it can be used 
            to revoke very large numbers of secrets/tokens at once.
            </summary>
            <param name="prefix"><para>[required]</para>
            Specifies the prefix to revoke.
            </param>
            <returns>Task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetSecretBackendsAsync">
            <summary>
            Gets all the mounted secret backends.
            </summary>
            <returns>
            The mounted secret backends.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.MountSecretBackendAsync(VaultSharp.V1.SecretsEngines.SecretsEngine)">
            <summary>
            Mounts the new secret backend to the mount point in the URL.
            </summary>
            <param name="secretBackend">The secret backend.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.UnmountSecretBackendAsync(System.String)">
            <summary>
            Unmounts the mount point specified in the URL.
            </summary>
            <param name="path"><para>[required]</para>
            The mount point for the secret backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetSecretBackendConfigAsync(System.String)">
            <summary>
            Gets the mounted secret backend's configuration values.
            Unlike the <see cref="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetSecretBackendsAsync"/> method, 
            this will return the current time in seconds for each TTL, 
            which may be the system default or a mount-specific value.
            </summary>
            <param name="mountPoint"><para>[required]</para>
            The mount point for the secret backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The mounted secret backend's configuration values.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ConfigureSecretBackendAsync(System.String,VaultSharp.Core.BackendConfig)">
            <summary>
            Tunes the mount configuration parameters for the given <see cref="!:path" />.
            </summary>
            <param name="path"><para>[required]</para>
            The mount point for the secret backend. (with or without trailing slashes. it doesn't matter)</param>
            <param name="backendConfig"><para>[required]</para>
            The mount configuration with the required setting values.
            Provide a value of <value>0</value> for the TTL settings 
            if you want to use the system defaults.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetPoliciesAsync">
            <summary>
            Gets all the available policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.WritePolicyAsync(VaultSharp.V1.SystemBackend.Policy)">
            <summary>
            Adds or updates the policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.DeletePolicyAsync(System.String)">
            <summary>
            Deletes the named policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetACLPoliciesAsync">
            <summary>
            Gets all the ACL policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetACLPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named ACL policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.WriteACLPolicyAsync(VaultSharp.V1.SystemBackend.ACLPolicy)">
            <summary>
            Adds or updates the ACL policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.DeleteACLPolicyAsync(System.String)">
            <summary>
            Deletes the named ACL policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetRawSecretKeysAsync(System.String)">
            <summary>
             Returns a list keys for a given path prefix.
            </summary>
            <param name="storagePathPrefix"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <returns>Keys.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ReadRawSecretAsync(System.String)">
            <summary>
            Reads the value of the key at the given path.
            This is the raw path in the sorage backend and not the logical path that is exposed via the mount system.
            </summary>
            <param name="storagePath"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <returns>
            The SecretsEngine with raw data.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.WriteRawSecretAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the value of the key at the given path.
            This is the raw path in the storage backend and not the logical path that is exposed via the mount system.
            </summary>
            <param name="storagePath"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <param name="values"><para>[required]</para>
            The values to write. The dictionary will be JSONized as a raw value string before being written.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.DeleteRawSecretAsync(System.String)">
            <summary>
            Delete the key with given path.
            This is the raw path in the storage backend and not the logical path that is exposed via the mount system.
            </summary>
            <param name="storagePath"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetRekeyStatusAsync">
            <summary>
            Gets the configuration and progress of the current rekey attempt.
            Information about the new shares to generate and the threshold required for the new shares,
            the number of unseal keys provided for this rekey and the required number of unseal keys is returned.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <returns>
            The rekey status.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.InitiateRekeyAsync(System.Int32,System.Int32,System.String[],System.Boolean)">
            <summary>
            Initiates a new rekey attempt.
            Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <param name="secretShares"><para>[required]</para>
            The number of shares to split the master key into.</param>
            <param name="secretThreshold"><para>[required]</para>
            The number of shares required to reconstruct the master key.
            This must be less than or equal to <see cref="!:secretShares" />.</param>
            <param name="pgpKeys"><para>[optional]</para>
            An array of PGP public keys used to encrypt the output unseal keys.
            Ordering is preserved.
            The keys must be base64-encoded from their original binary representation.
            The size of this array must be the same as <see cref="!:secretShares" />.</param>
            <param name="backup"><para>[optional]</para>
            If using PGP-encrypted keys, whether Vault should also back them up to a well-known 
            location in physical storage. These can then be retrieved and removed 
            via the GetRekeyBackupAsync endpoint. Makes sense only when pgp keys are provided.
            Defaults to 'false', meaning no backup.
            </param>
            <returns>
            The rekey status.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.CancelRekeyAsync">
            <summary>
            Cancels any in-progress rekey. This clears the rekey settings as well as any progress made.
            This must be called to change the parameters of the rekey.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetRekeyBackupKeysAsync">
            <summary>
            Gets the the backup copy of PGP-encrypted unseal keys. 
            The returned value is the nonce of the rekey operation and a map of PGP key 
            fingerprint to hex-encoded PGP-encrypted key.
            </summary>
            <returns>The rekey backup info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.DeleteRekeyBackupKeysAsync">
            <summary>
            Deletes the backup copy of PGP-encrypted unseal keys.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.ContinueRekeyAsync(System.String,System.String)">
            <summary>
            Continues the rekey process. Enter a single master key share to progress the rekey of the Vault.
            If the threshold number of master key shares is reached, Vault will complete the rekey.
            Otherwise, this API must be called multiple times until that threshold is met.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <param name="masterShareKey"><para>[required]</para>
            A single master share key.</param>
            <param name="rekeyNonce"><para>[required]</para>
            The nonce of the rekey operation.</param>
            <returns>
            An object indicating the rekey operation nonce and completion status; 
            if completed, the new master keys are returned. 
            If the keys are PGP-encrypted, an array of key fingerprints will also be provided 
            (with the order in which the keys were used for encryption) along with whether 
            or not the keys were backed up to physical storage.
            </returns>
            <remarks>
            This method returns <see cref="T:VaultSharp.V1.SystemBackend.RekeyStatus" /> till the rekey is complete.
            Then it returns <see cref="T:VaultSharp.V1.SystemBackend.RekeyProgress" /> type, when the rekey is complete.
            Unfortunately, in C# we can return only one type, and it is not worth all the inheritance/jugaad.
            So for most-valued simplicity, the method returns the final data type. [potential future raja todo]
            </remarks>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.QuickRekeyAsync(System.String[],System.String)">
            <summary>
            Rekeys the Vault in a single call.
            Call this after calling the <see cref="M:VaultSharp.V1.SystemBackend.ISystemBackend.InitiateRekeyAsync(System.Int32,System.Int32,System.String[],System.Boolean)"/> method.
            Provide all the master keys together.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <param name="thresholdMasterShareKeys">Threshold master share keys.</param>
            <param name="rekeyNonce"><para>[required]</para>
            The nonce of the rekey operation.</param>
            <returns>The final Rekey progress after all the share keys are applied.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.SealAsync">
            <summary>
            Seals the Vault. In HA mode, only an active node can be sealed. 
            Standby nodes should be restarted to get the same effect. 
            Requires a token with root policy or sudo capability on the path.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.GetSealStatusAsync">
            <summary>
            Gets the seal status of the Vault.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <returns>
            The seal status of the Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.UnsealAsync(System.String,System.Boolean)">
            <summary>
            Progresses the unsealing of the Vault.
            Enter a single master key share to progress the unsealing of the Vault.
            If the threshold number of master key shares is reached, Vault will attempt to unseal the Vault.
            Otherwise, this API must be called multiple times until that threshold is met.
            <para>
            Either the <see cref="!:masterShareKey" /> or <see cref="!:resetCompletely" /> parameter must be provided; 
            if both are provided, <see cref="!:resetCompletely" /> takes precedence.
            </para>
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="masterShareKey">A single master share key.</param>
            <param name="resetCompletely">When <value>true</value>, the previously-provided unseal keys are discarded from memory 
            and the unseal process is completely reset.
            Default value is <value>false</value>.
            If you make a call with the value as <value>true</value>, it doesn't matter if this call has a valid unused <see cref="!:masterShareKey" />. 
            It'll be ignored.</param>
            <returns>
            The seal status of the Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.QuickUnsealAsync(System.String[])">
            <summary>
            Unseals the Vault in a single call.
            Provide all the master keys together.
            </summary>
            <param name="thresholdMasterShareKeys">Threshold Master share keys.</param>
            <returns>The final Seal Status after all the share keys are applied.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.WrapResponseDataAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Wraps the given user-supplied data inside a response-wrapped token.
            </summary>
            <param name="data">
            <para>[required]</para>
            The user supplied data.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The wrapped response.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.LookupTokenWrapInfoAsync(System.String)">
            <summary>
            Looks up wrapping properties for the given token.
            </summary>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The token wrap info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.RewrapWrappedResponseDataAsync(System.String)">
            <summary>
            Rewraps a response-wrapped token; the new token will use the same creation TTL as 
            the original token and contain the same response. 
            The old token will be invalidated. 
            This can be used for long-term storage of a secret in a response-wrapped 
            token when rotation is a requirement.
            </summary>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The secret with re-wrapped info.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.ISystemBackend.UnwrapWrappedResponseDataAsync``1(System.String)">
            <summary>
            Returns the original response inside the given wrapping token. 
            This endpoint provides additional validation checks on the token, 
            returns the original value on the wire and ensures that the response is properly audit-logged.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The unwrapped original data.</returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Leader">
            <summary>
            Represents information about high availability status and current leader instance of Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Leader.HighAvailabilityEnabled">
            <summary>
            Gets or sets a value indicating whether [high availability enabled].
            </summary>
            <value>
            <c>true</c> if [high availability enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Leader.IsSelf">
            <summary>
            Gets or sets a value indicating whether this instance is the leader.
            </summary>
            <value>
              <c>true</c> if this instance is the leader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Leader.Address">
            <summary>
            Gets or sets the address of the leader.
            e.g. https://127.0.0.1:8200/
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Leader.ClusterAddress">
            <summary>
            Gets or sets the address of the leader cluster.
            e.g. https://127.0.0.1:8201/
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Leader.PerformanceStandby">
            <summary>
            Gets or sets the performance standby.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Leader.PerformanceStandbyLastRemoteWal">
            <summary>
            Gets or sets the performance standby last remote wal.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Lease">
            <summary>
            Lease info.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Lease.Id">
            <summary>
            Gets or sets the lease identifier.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Lease.IssueTime">
            <summary>
            Gets or sets the issue time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Lease.ExpiryTime">
            <summary>
            Gets or sets the expiry time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Lease.LastRenewalTime">
            <summary>
            Gets or sets the last renewal time.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Lease.Renewable">
            <summary>
            Gets or sets the flag indicating if this lease is renewable.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Lease.TimeToLive">
            <summary>
            Gets or sets the time to live for the lease.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MasterCredentials">
            <summary>
            Represents the root credentials (master keys and root token) for Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MasterCredentials.MasterKeys">
            <summary>
            Gets or sets the master keys (possibly encrypted with PGP Keys, if provided during Vault initialization)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MasterCredentials.Base64MasterKeys">
            <summary>
            Gets or sets the new base 64 master keys. (possibly pgp encrypted)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MasterCredentials.RootToken">
            <summary>
            Gets or sets the root token which has superhero permissions on Vault.
            </summary>
            <value>
            The root token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.AbstractMFAConfig.Name">
            <summary>
            Gets the name of MFA method.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.AbstractMFAConfig.Type">
            <summary>
            Gets or sets the type of MFA.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.AbstractMFAProviderBase`1">
            <summary>
            The base MFA provider for all types.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.AbstractMFAProviderBase`1.Type">
            <summary>
            Gets the type of MFA method.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig">
            <summary>
            Duo Config.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.MountAccessor">
            <summary>
            Gets or sets the mount to tie this method to for use in automatic mappings. 
            The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.UsernameFormat">
            <summary>
            Gets or sets the format string for mapping Identity names to MFA method names. 
            Values to substitute should be placed in {{}}. 
            For example, "{{alias.name}}@example.com". 
            If blank, the Alias's Name field will be used as-is. 
            Currently-supported mappings:
                alias.name: The name returned by the mount configured via the mount_accessor parameter
                entity.name: The name configured for the Entity
                alias.metadata.[key]: The value of the Alias's metadata parameter
                entity.metadata.[key]: The value of the Entity's metadata paramater
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.SecretKey">
            <summary>
            Gets or sets the SecretsEngine key for Duo.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.IntegrationKey">
            <summary>
            Gets or sets the Integration key for Duo.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.ApiHostname">
            <summary>
            Gets or sets the API hostname for Duo.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig.PushInfo">
            <summary>
            Gets or sets the Push information for Duo.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.IMFA">
            <summary>
            The MFA interface.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.IMFAProviderBase`1">
            <summary>
            The MFA interface for operations.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.MFAProvider">
            <summary>
            MFA provider.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig">
            <summary>
            Okta Config.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.MountAccessor">
            <summary>
            Gets or sets the mount to tie this method to for use in automatic mappings. 
            The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.UsernameFormat">
            <summary>
            Gets or sets the format string for mapping Identity names to MFA method names. 
            Values to substitute should be placed in {{}}. 
            For example, "{{alias.name}}@example.com". 
            If blank, the Alias's Name field will be used as-is. 
            Currently-supported mappings:
                alias.name: The name returned by the mount configured via the mount_accessor parameter
                entity.name: The name configured for the Entity
                alias.metadata.[key]: The value of the Alias's metadata parameter
                entity.metadata.[key]: The value of the Entity's metadata paramater
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.OrgName">
            <summary>
            Gets or sets the name of the organization to be used in the Okta API.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.ApiToken">
            <summary>
            Gets or sets the Okta Api Key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.BaseUrl">
            <summary>
            Gets or sets a flag when set, will be used as the base domain for API requests. 
            Examples are okta.com, oktapreview.com, and okta-emea.com.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig.Production">
            <summary>
            Gets or sets a flag indicating if this is production.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig">
            <summary>
            PingID Config.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.MountAccessor">
            <summary>
            Gets or sets the mount to tie this method to for use in automatic mappings. 
            The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.UsernameFormat">
            <summary>
            Gets or sets the format string for mapping Identity names to MFA method names. 
            Values to substitute should be placed in {{}}. 
            For example, "{{alias.name}}@example.com". 
            If blank, the Alias's Name field will be used as-is. 
            Currently-supported mappings:
                alias.name: The name returned by the mount configured via the mount_accessor parameter
                entity.name: The name configured for the Entity
                alias.metadata.[key]: The value of the Alias's metadata parameter
                entity.metadata.[key]: The value of the Entity's metadata paramater
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.Base64SettingsFile">
            <summary>
            Gets or sets a base64-encoded third-party settings file retrieved from PingID's configuration page.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.UseSignature">
            <summary>
            Gets or sets a flag to use signature.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.IdpUrl">
            <summary>
            Gets or sets IDP url.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.AdminUrl">
            <summary>
            Gets or sets the admin url.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.AuthenticatorUrl">
            <summary>
            Gets or sets the authenticator url.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig.OrgAlias">
            <summary>
            Gets or sets the Org Alias.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig">
            <summary>
            TOTP Config.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.Issuer">
            <summary>
            Gets or sets the name of the key's issuing organization.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.Period">
            <summary>
            Gets or sets the length of time used to generate a counter for the TOTP token calculation.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.KeySize">
            <summary>
            Gets or sets the size in bytes of the generated key.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.QRSize">
            <summary>
            Gets or sets the pixel size of the generated square QR code.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.Algorithm">
            <summary>
            Gets or sets the hashing algorithm used to generate the TOTP code. 
            Options include "SHA1", "SHA256" and "SHA512".
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.Digits">
            <summary>
            Gets or sets the number of digits in the generated TOTP token. This value can either be 6 or 8.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.Skew">
            <summary>
            Gets or sets the number of delay periods that are allowed when validating a TOTP token. 
            This value can either be 0 or 1.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig.#ctor">
            <summary>
            Constructor with default values.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Plugin.IPlugin">
            <summary>
            Plugin interface.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Plugin.IPlugin.ReloadBackendsAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reloads mounted plugin backends.
            </summary>
            <param name="plugin">The name of the plugin to reload, as registered in the plugin catalog.</param>
            <param name="backendMountPaths">Array of mount paths of the plugin backends to reload.</param>
            <returns>Task</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Plugin.IPlugin.GetCatalogAsync">
            <summary>
            Gets the list of plugins from the catalog.
            </summary>
            <returns>The plugin names.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Plugin.IPlugin.RegisterAsync(VaultSharp.V1.SystemBackend.Plugin.PluginConfig)">
            <summary>
            Registers a new plugin, or updates an existing one with the supplied name.
            </summary>
            <param name="pluginConfig">
            The plugin configuration.
            </param>
            <returns>Task.</returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Plugin.IPlugin.GetConfigAsync(System.String)">
            <summary>
            Gets the configuration data for the plugin with the given name.
            </summary>
            <param name="pluginName"><para>[required]</para>
            Specifies the name of the plugin to retrieve. 
            </param>
            <returns></returns>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.Plugin.IPlugin.UnregisterAsync(System.String)">
            <summary>
            Removes the plugin from the catalog.
            </summary>
            <param name="pluginName">The plugin to be removed.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Plugin.PluginConfig">
            <summary>
            The plugin config.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Plugin.PluginConfig.Args">
            <summary>
            Gets or sets the plugin arguments.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Plugin.PluginConfig.Builtin">
            <summary>
            Gets or sets a flag denoting if this plugin is built in or not.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Plugin.PluginConfig.Command">
            <summary>
            Gets or sets the command used to execute the plugin. 
            This is relative to the plugin directory. e.g. "myplugin --my_flag=1"
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Plugin.PluginConfig.Name">
            <summary>
            Gets or sets the name for this plugin. 
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Plugin.PluginConfig.Sha256">
            <summary>
            Gets or sets the SHA256 sum of the plugin's binary. 
            Before a plugin is run it's SHA will be checked against this value, if they do not match the plugin can not be run.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Plugin.PluginProvider">
            <summary>
            Plugin provider.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.Policy">
            <summary>
            Represents a Vault Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.Policy.Rules">
            <summary>
            Gets or sets the rules for the policy.
            <para>
            These rules are in a raw, HCL (Hashicorp Configuration Language) or JSON format.
            So write to them as a single raw string value from an HCL or JSON packet.
            And read them as a single raw string value and then parse them for HCL or JSON.
            </para>
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RekeyBackupInfo">
            <summary>
            Represents the Rekey backup information.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyBackupInfo.Nonce">
            <summary>
            Gets or sets the nonce for the current rekey operation..
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyBackupInfo.PGPFingerprintToEncryptedKeyMap">
            <summary>
            Gets or sets the map of PGP key fingerprint to hex-encoded PGP-encrypted key.
            </summary>
            <value>
            The map of PGP key fingerprint to hex-encoded PGP-encrypted key.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RekeyProgress">
            <summary>
            Represents the rekey progress.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyProgress.Nonce">
            <summary>
            Gets or sets the nonce for the current rekey operation..
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyProgress.Complete">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.SystemBackend.RekeyProgress"/> is complete.
            </summary>
            <value>
              <c>true</c> if complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyProgress.MasterKeys">
            <summary>
            Gets or sets the new master keys. (possibly pgp encrypted)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyProgress.Base64MasterKeys">
            <summary>
            Gets or sets the new base 64 master keys. (possibly pgp encrypted)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyProgress.PGPFingerPrints">
            <summary>
            Gets or sets the PGP finger prints if PGP keys are being used to encrypt the final shares.
            </summary>
            <value>
            The PGP finger prints.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyProgress.Backup">
            <summary>
            Gets or sets a value indicating whether the final keys will be backed up to physical storage.
            </summary>
            <value>
              <c>true</c> if backup; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RekeyStatus">
            <summary>
            Represents the configuration and progress of the current rekey attempt.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.Nonce">
            <summary>
            Gets or sets the nonce for the current rekey operation..
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.Started">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.V1.SystemBackend.RekeyStatus"/> is started.
            </summary>
            <value>
              <c>true</c> if started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.SecretThreshold">
            <summary>
            Gets or sets the number of shares required to reconstruct the master key.
            </summary>
            <value>
            The secret threshold.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.SecretShares">
            <summary>
            Gets or sets the number of shares to split the master key into.
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.UnsealKeysProvided">
            <summary>
            Gets or sets the number of unseal keys provided for this rekey.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.RequiredUnsealKeys">
            <summary>
            Gets or sets the required number of unseal keys required to complete the rekeying process.
            </summary>
            <value>
            The required unseal keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.PGPFingerPrints">
            <summary>
            Gets or sets the PGP finger prints if PGP keys are being used to encrypt the final shares.
            </summary>
            <value>
            The PGP finger prints.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RekeyStatus.Backup">
            <summary>
            Gets or sets a value indicating whether the final keys will be backed up to physical storage.
            </summary>
            <value>
              <c>true</c> if backup; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RenewedLease">
            <summary>
            Renewed Lease info.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RenewedLease.LeaseId">
            <summary>
            Gets or sets the lease identifier.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RenewedLease.Renewable">
            <summary>
            Gets or sets the flag indicating if this lease is renewable.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RenewedLease.LeaseDuration">
            <summary>
            Gets or sets the time to live for the lease.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RequestHeader">
            <summary>
            One Header.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RequestHeader.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RequestHeader.HMAC">
            <summary>
            Gets or sets if this header's value is HMAC'ed in the audit logs.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RequestHeaderSet">
            <summary>
            Represents the request headers.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RequestHeaderSet.Headers">
            <summary>
            Gets or sets a value.
            </summary>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.RequestHeaderSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus">
            <summary>
            Represents the configuration and progress of the root token generation attempt.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.Nonce">
            <summary>
            Gets or sets the nonce for the current root token generation.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.Started">
            <summary>
            Gets or sets a value indicating this <see cref="T:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus"/>.
            </summary>
            <value>
              <c>true</c> if started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.UnsealKeysProvided">
            <summary>
            Gets or sets the number of unseal keys provided for this root token generation.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.RequiredUnsealKeys">
            <summary>
            Gets or sets the required number of unseal keys required to 
            complete the root token generation.
            </summary>
            <value>
            The required unseal keys.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.Complete">
            <summary>
            Gets or sets a value indicating whether 
            this root token generation is complete.
            </summary>
            <value>
              <c>true</c> if complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.EncodedToken">
            <summary>
            Gets or sets the encoded token if the attempt is complete.
            </summary>
            <value>
            The encoded token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.EncodedRootToken">
            <summary>
            Gets or sets the encoded root token if the attempt is complete.
            </summary>
            <value>
            The encoded root token.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.PGPFingerPrint">
            <summary>
            Gets or sets the PGP finger print if 
            a PGP key is being used to encrypt the final root token.
            </summary>
            <value>
            The PGP finger prints.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.OTP">
            <summary>
            Gets or sets the OTP.
            </summary>
            <value>
            The OTP.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.RootTokenGenerationStatus.OTPLength">
            <summary>
            Gets or sets the OTP length.
            </summary>
            <value>
            The OTP length.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.SealStatus">
            <summary>
            Represents the Seal status of the Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Type">
            <summary>
            Gets or sets a value indicating the type.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Initialized">
            <summary>
            Gets or sets a value indicating thif initialized.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Sealed">
            <summary>
            Gets or sets a value indicating about the <see cref="T:VaultSharp.V1.SystemBackend.SealStatus"/>.
            </summary>
            <value>
              <c>true</c> if sealed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.SecretThreshold">
            <summary>
            Gets or sets the number of shares required to reconstruct the master key.
            </summary>
            <value>
            The secret threshold.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.SecretShares">
            <summary>
            Gets or sets the number of shares to split the master key into.
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Progress">
            <summary>
            Gets or sets the number of shares that have been successfully applied to reconstruct the master key.
            When the value is about to reach <see cref="P:VaultSharp.V1.SystemBackend.SealStatus.SecretThreshold"/>, the Vault will be unsealed and the value will become <value>0</value>.
            </summary>
            <value>
            The progress count.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Version">
            <summary>
            Gets or sets the vault version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.Migration">
            <summary>
            Gets or sets the migration.
            </summary>
            <value>
            The migration.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.RecoverySeal">
            <summary>
            Gets or sets the recovery seal.
            </summary>
            <value>
            The recovery seal.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.StorageType">
            <summary>
            Gets or sets what type of storage the cluster is configured to use
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.ClusterName">
            <summary>
            Gets or sets the name of the cluster.
            </summary>
            <value>
            The name of the cluster.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SealStatus.ClusterId">
            <summary>
            Gets or sets the cluster identifier.
            </summary>
            <value>
            The cluster identifier.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.SyslogAuditBackend">
            <summary>
            Represents the <see cref="P:VaultSharp.V1.SystemBackend.AuditBackendType.Syslog"/> based audit backend.
            This audit backend writes audit logs to syslog.
            It currently does not support a configurable syslog destination, and always sends to the local agent.
            This backend is only supported on Unix systems, and should not be enabled if any standby Vault instances do not support it.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SyslogAuditBackend.Type">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SyslogAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.SyslogAuditBackendOptions">
            <summary>
            Represents the options for the <see cref="T:VaultSharp.V1.SystemBackend.SyslogAuditBackend"/>.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SyslogAuditBackendOptions.Facility">
            <summary>
            <para>[optional]</para>
            Gets or sets the syslog facility to use. 
            Defaults to "AUTH".
            </summary>
            <value>
            The facility.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.SyslogAuditBackendOptions.Tag">
            <summary>
            <para>[optional]</para>
            Gets or sets the syslog tag to use.
            Defaults to "vault".
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="M:VaultSharp.V1.SystemBackend.SyslogAuditBackendOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.V1.SystemBackend.SyslogAuditBackendOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.TokenCapability">
            <summary>
            Represents the capabilities of a token.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.TokenCapability.Capabilities">
            <summary>
            Gets the capabilities.
            </summary>
        </member>
        <member name="T:VaultSharp.V1.SystemBackend.TokenWrapData">
            <summary>
            Represents the token wrap data.
            </summary>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.TokenWrapData.CreationPath">
            <summary>
            Gets or sets the creation path.
            </summary>
            <value>
            The creation path.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.TokenWrapData.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.V1.SystemBackend.TokenWrapData.CreationTimeToLive">
            <summary>
            Gets or sets the creation time to live.
            </summary>
            <value>
            The creation time to live.
            </value>
        </member>
        <member name="T:VaultSharp.VaultClient">
            <summary>
            The concrete Vault client class.
            </summary>
        </member>
        <member name="M:VaultSharp.VaultClient.#ctor(VaultSharp.VaultClientSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="vaultClientSettings"></param>
        </member>
        <member name="P:VaultSharp.VaultClient.V1">
            <summary>
            Gets the V1 Client interface for Vault Api.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClient.Settings">
            <summary>
            Gets the Vault Client Settings.
            </summary>
        </member>
        <member name="T:VaultSharp.VaultClientSettings">
            <summary>
            The vault client settings.
            </summary>
        </member>
        <member name="M:VaultSharp.VaultClientSettings.#ctor(System.String,VaultSharp.V1.AuthMethods.IAuthMethodInfo)">
            <summary>
            Constructor with bare minimal required fields.
            </summary>
            <param name="vaultServerUriWithPort"></param>
            <param name="authMethodInfo"></param>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.VaultServerUriWithPort">
            <summary>
            The Vault Server Uri with port.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.AuthMethodInfo">
            <summary>
            The auth method to be used to acquire a vault token.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.ContinueAsyncTasksOnCapturedContext">
            <summary>
            Flag to indicate async context.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.VaultServiceTimeout">
            <summary>
            The Api timeout.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.PostProcessHttpClientHandlerAction">
            <summary>
            The one time http client's http client handler delegate.
            Use this to set proxy settings etc.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.BeforeApiRequestAction">
            <summary>
            The per http request delegate invoked before every vault api http request.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.AfterApiResponseAction">
            <summary>
            The per http response delegate invoked after every vault api http response.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.UseVaultTokenHeaderInsteadOfAuthorizationHeader">
            <summary>
            Flag to indicate how the vault token should be passed to the API.
            Default is to use the Authorization: Bearer &lt;vault-token&gt; scheme.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.Namespace">
            <summary>
            The namespace to use to achieve tenant level isolation.
            Enterprise Vault only.
            </summary>
        </member>
        <member name="P:VaultSharp.VaultClientSettings.MyHttpClientProviderFunc">
            <summary>
            A factory delegate to use if you want to provide your own http client.
            The Handler already has the certificates etc. enabled. 
            Don't worry about setting any vault specific values on your http client.
            Just create your http client and pass it in. 
            VaultSharp will set all the necessary things.
            Use the handler parameter to set proxy etc. 
            It is essential that your HttpClient use the handler, since it has certificate auth etc.
            </summary>
        </member>
    </members>
</doc>
